{"version":3,"sources":["../../_patterns/00-base/01-typography/_elements.scss","../../_patterns/00-base/_mixins.scss","../../_patterns/00-base/01-typography/_variables.scss","../../_patterns/00-base/04-spacing/_variables.scss","../../_patterns/01-atoms/02-headings/_elements.scss","../../_patterns/02-molecules/01-forms/_elements.scss","../../_patterns/01-atoms/01-link/_elements.scss","../../_patterns/00-base/00-colors/_variables.scss","../../_patterns/01-atoms/05-images/_elements.scss","../../_patterns/00-base/01-typography/_helpers.scss","global.css","../../_patterns/01-atoms/02-headings/_helpers.scss","../../../node_modules/sass-mq/_mq.scss","../../_patterns/01-atoms/03-text/_helpers.scss","../../_patterns/01-atoms/10-visibility/_helpers.scss","global.scss"],"names":[],"mappings":"AAAA;EC2BI,gBAA8B;CDzBjC;;AAED;ECwCU,mDAAqE;EAGrE,iBCpBO;EDoBP,mBCnBS;EFtBjB,qBEL4B;CFM7B;;AAED;ECmCU,kDAAqE;EAGrE,iBCVO;EDUP,mBCTS;CF3BlB;;AAED;EC+BU,mDAAqE;EAGrE,iBCfO;EDeP,mBCdS;CFlBlB;;AAED;EACE,iBGlBW;CHmBZ;;AInBD;EACE,iBAAgB;EAChB,eAAiB;CAIlB;;AAND;EAII,sBAAqB;CACtB;;ACJH;EJ2CU,mDAAqE;EAGrE,iBCpBO;EDoBP,mBCnBS;CGzBlB;;AAED;EJuCU,kDAAqE;EAGrE,iBCVO;EDUP,mBCTS;CG/BlB;;ACPD;EACE,eC+BkB;ED9BlB,sBAAqB;CACtB;;AEHD;EACE,aAAY;EACZ,gBAAe;CAChB;;ACHD;ER4CU,kDAAqE;EAGrE,iBC9BO;ED8BP,mBC7BS;COhBlB;;AAGD;ERuCU,iDAAqE;EAGrE,iBCzBO;EDyBP,mBCxBS;COhBlB;;AAED;ERmCU,kDAAqE;EAGrE,iBCVO;EDUP,mBCTS;CO3BlB;;AAED;ER+BU,mDAAqE;EAGrE,iBCLO;EDKP,mBCJS;CO5BlB;;AAED;ER2BU,mDAAqE;EAGrE,iBCpBO;EDoBP,mBCnBS;COTlB;;AAED;ERuBU,mDAAqE;EAGrE,iBCfO;EDeP,mBCdS;COVlB;;AAED;ERmBU,kDAAqE;EAGrE,iBCxCO;EDwCP,mBCvCS;COuBlB;;AAND;;ERmBU,mDAAqE;EAGrE,iBCnCO;EDmCP,mBClCS;COiBhB;;AAGH;ERWU,mDAAqE;EAGrE,iBCnCO;EDmCP,mBClCS;CO0BlB;;AAND;;ERWU,mDAAqE;EAGrE,iBCnCO;EDmCP,mBClCS;COyBhB;;AAGH;ERGU,kDAAqE;EAGrE,iBCAO;EDAP,mBCCS;COGlB;;AAVD;;ERGU,mDAAqE;EAGrE,iBCKO;EDLP,mBCMS;COPhB;;AALH;;ERGU,kDAAqE;EAGrE,iBCAO;EDAP,mBCCS;COEhB;;AAGH;ERTU,mDAAqE;EAGrE,iBCKO;EDLP,mBCMS;COUlB;;AAVD;;ERTU,mDAAqE;EAGrE,iBCKO;EDLP,mBCMS;COKhB;;AALH;;ERTU,kDAAqE;EAGrE,iBCAO;EDAP,mBCCS;COchB;;AAGH;;;;;ERrBU,iDAAqE;EAGrE,iBCYO;EDZP,mBCaS;COYhB;;ACkGH;ET9HU,kDAAqE;EAGrE,iBCAO;EDAP,mBCCS;ES9CjB,oBAAmB;EACnB,UAAS;EACT,0BAAyB;CAc1B;;ADiKD;ETvIU,iDAAqE;EAGrE,iBCYO;EDZP,mBCaS;ESpDf,eAAc;EACd,gBAAe;EACf,oBAAmB;EACnB,qBAAoB;EACpB,iBAAgB;EAChB,qBAAoB;CAIrB;;ACgNK;EFjCN;ICjLI,kBAAiB;GAEpB;CDkLF;;AC/KD;EVOI,oBAA8B;CUJjC;;AC0MO;ED7MR;IVIM,kBAA8B;GUDnC;CDsLA;;ACpLD;EVEI,gBAA8B;EUAhC,qBAAoB;CACrB;;AAED;EVHI,mBAA8B;CUOjC;;AC+LO;EDnMR;IVNM,gBAA8B;GUUnC;CD0LA;;AEKO;EDnMR;IVNM,mBAA8B;GUUnC;CDgMA;;AC9LD;EVTI,kBAA8B;CUajC;;ACyLO;ED7LR;IVZM,oBAA8B;GUgBnC;CDoMA;;AEXO;ED7LR;IVZM,qBAA8B;GUgBnC;CD0MA;;ACxMD;EVfI,qBAA8B;CUoBjC;;ACkLO;EDvLR;IVlBM,oBAA8B;GUuBnC;CD6MA;;AE3BO;EDvLR;IVlBM,oBAA8B;GUuBnC;CDmNA;;AEjCO;EDvLR;IVlBM,oBAA8B;GUuBnC;CDyNA;;ACvND;EVtBI,mBAA8B;CU0BjC;;AC4KO;EDhLR;IVzBM,oBAA8B;GU6BnC;CD6NA;;AEjDO;EDhLR;IVzBM,mBAA8B;GU6BnC;CDmOA;;AGnRD;EZsBI,mBAA8B;CYlBjC;;ADwNO;EC5NR;IZmBM,qBAA8B;GYfnC;CHyRA;;AEjEO;EC5NR;IZmBM,oBAA8B;GYfnC;CH+RA;;AEvEO;EEjOR;IAEI,cAAa;GAEhB;CJ0SA;;AE7EO;EE3NR;IAEI,cAAa;GAEhB;CJ0SA;;AEnFO;EErNR;IAEI,cAAa;GAEhB;CJ0SA;;AEzFO;EE/MR;IAEI,cAAa;GAEhB;CJ0SA;;AE/FO;EEzMR;IAEI,cAAa;GAEhB;CJ0SA;;AK7SD;EACE,+BAAsB;UAAtB,uBAAsB;CACvB;;AAED;EACE,UAAS;EACT,WAAU;CACX","file":"global.css","sourcesContent":["html {\n  @include font-size($base-font-size);\n}\n\nhtml, body {\n  @include font('avenir', 'medium');\n  line-height: $base-line-height;\n}\n\nb, strong {\n  @include font('avenir', 'bold');\n}\n\ni, em {\n  @include font('avenir', 'mediumItalic');\n}\n\np {\n  margin: 0 0 $spacer;\n}\n","// Clearfix\n//------------------------------------------------------------------------------\n\n@mixin clearfix {\n  &::after,\n  &::before {\n    content: '';\n    display: table;\n  }\n  &::after {\n    clear: both;\n  }\n}\n\n// Font Size\n//------------------------------------------------------------------------------\n// @example\n//   @include font-size(12px);\n//   @include font-size(12px, 'lg');\n//------------------------------------------------------------------------------\n\n@mixin font-size($size: $base-font-size, $breakpoint: null) {\n  @if ($breakpoint != null) {\n    @include mq($breakpoint) {\n      font-size: $size / 16px * 1rem;\n    }\n  } @else {\n    font-size: $size / 16px * 1rem;\n  }\n}\n\n// Font\n//------------------------------------------------------------------------------\n// @example\n//   @include font('avenir', 'light');\n//   @include font('handwriting', 'regular', 'family');\n//------------------------------------------------------------------------------\n\n@mixin font($group, $variant: regular, $properties: family weight style, $font-stack: $base-font-stack) {\n  $font-properties: map-deep-get($font-stack, $group, $variant);\n  @if $font-properties {\n    @each $property, $values in $font-properties {\n      @if contains($properties, $property) {\n        @if $property == 'family' {\n          font-#{$property}: unquote(map-get($font-properties, $property));\n        }\n        @else {\n          font-#{$property}: map-get($font-properties, $property);\n        }\n      }\n    }\n  }\n}\n\n// Visually Hidden\n//\n// Hides elements visually, but keep them available for screen readers. For\n// elements that need to be focusable (e.g. a, button, input, select, textarea)\n// use `true` parameter to maintain focusability.\n//\n// Note: This is also avaialble as a helper class, `.visually-hidden` or\n// `visually-hidden-focusable`.\n//\n// @param {bool} $focusable - Whether the target selector is focusable.\n//\n// @example\n//    div {\n//      @include visually-hidden;\n//    }\n//    a {\n//      @include visually-hidden(true);\n//    }\n//------------------------------------------------------------------------------\n\n@mixin visually-hidden($focusable: false) {\n  & {\n    clip: rect(1px, 1px, 1px, 1px);\n    height: 1px;\n    overflow: hidden;\n    position: absolute !important;\n    width: 1px;\n    word-wrap: normal;\n    @if ($focusable) {\n      &:active,\n      &:focus {\n        clip: auto;\n        height: auto;\n        overflow: visible;\n        position: static !important;\n        width: auto;\n      }\n    }\n  }\n}\n","$base-font-size: 16px;\n$base-line-height: 1.428571429;\n\n$base-font-stack: (\n  avenir: (\n    light: (\n      family: '\"Avenir LT W01 35 Light\", sans-serif',\n      weight: 200,\n      style: normal\n    ),\n    lightItalic: (\n      family: '\"AvenirLTW01-35LightObli\", sans-serif',\n      weight: 200,\n      style: italic\n    ),\n    regular: (\n      family: '\"Avenir LT W01 55 Roman\", sans-serif',\n      weight: 400,\n      style: normal\n    ),\n    italic: (\n      family: '\"AvenirLTW01-55Oblique\", sans-serif',\n      weight: 400,\n      style: italic\n    ),\n    medium: (\n      family: '\"Avenir LT W01 65 Medium\", sans-serif',\n      weight: 500,\n      style: normal\n    ),\n    mediumItalic: (\n      family: '\"AvenirLTW01-65MediumObl\", sans-serif',\n      weight: 500,\n      style: italic\n    ),\n    bold: (\n      family: '\"Avenir LT W01 85 Heavy\", sans-serif',\n      weight: 700,\n      style: normal\n    ),\n    boldItalic: (\n      family: '\"AvenirLTW01-85HeavyObli\", sans-serif',\n      weight: 700,\n      style: italic\n    ),\n    black: (\n      family: '\"Avenir LT W01 95 Black\", sans-serif',\n      weight: 700,\n      style: normal\n    ),\n    blackItalic: (\n      family: '\"AvenirLTW01-95BlackObli\", sans-serif',\n      weight: 700,\n      style: italic\n    )\n  ),\n  handwriting: (\n    regular: (\n      family: '\"Los Angeles Autograph\", sans-serif',\n      weight: 400,\n      style: normal\n    )\n  )\n);\n","$spacer: 10px;\n\n$spacer-xs: ($spacer * 0.5);\n$spacer-sm: $spacer;\n$spacer-md: ($spacer * 2);\n$spacer-lg: ($spacer * 3);\n$spacer-xl: ($spacer * 4);\n\n$spacing: (\n  xs: $spacer-xs,\n  sm: $spacer-sm,\n  md: $spacer-md,\n  lg: $spacer-lg,\n  xl: $spacer-xl\n);\n","h1, h2, h3, h4, h5, h6 {\n  line-height: 1.1;\n  margin: $spacer 0;\n  a {\n    text-decoration: none;\n  }\n}\n","\ninput, select, textarea {\n  @include font('avenir', 'medium');\n}\n\nlabel {\n  @include font('avenir', 'bold');\n}\n","a {\n  color: color(link-blue);\n  text-decoration: none;\n}\n","$colors: (\n  white: #fff,\n  black: #000,\n  dark-gray: #313131,\n  black-two: #333,\n  medium-gray: #666,\n  waterloo: #838595,\n  oslo-gray: #878a8f,\n  greyish: #aca39a,\n  border-gray: #d9d9d9,\n  article-gray: #f3f3f3,\n  ebb: #f4f2f1,\n  light-gray: #f5f5f5,\n  secondary-red-2: #b52800,\n  milano-red: #c00f02,\n  secondary-red: #ce0037,\n  secondary-red-3: #d81e05,\n  red: #da291c,\n  pomegranate: #ef382a,\n  orange: #ff6900,\n  secondary-orange: #ffa300,\n  yellow: #fcf301,\n  japanese-laurel: #0a8b13,\n  apple: #41ad48,\n  olive: #7a9a01,\n  green: #97d700,\n  lime: #b5bd00,\n  dark-blue: #003c6e,\n  blue: #004b87,\n  curious-blue: #2e94c6,\n  sky-blue: #0095c8,\n  turquoise: #00a9ce,\n  link-blue: #428bca,\n  shakespeare: #58a9d1,\n  baby-blue: #d5eaf6,\n  indigo: #409,\n  magenta: #c6007e,\n  eggplant: #aa0061\n);\n\n$color-background: #fff;\n$color-foreground: #333;\n","img {\n  height: auto;\n  max-width: 100%;\n}\n\n// @todo\n//------------------------------------------------------------------------------\n// - picture\n// - figure\n",".f-regular {\n  @include font(avenir);\n}\n\n\n.f-italic {\n  @include font(avenir, italic);\n}\n\n.f-bold {\n  @include font(avenir, bold);\n}\n\n.f-bold-italic {\n  @include font(avenir, boldItalic);\n}\n\n.f-medium {\n  @include font(avenir, medium);\n}\n\n.f-medium-italic {\n  @include font(avenir, mediumItalic);\n}\n\n.f-light {\n  @include font(avenir, light);\n  i,\n  em {\n    @include font(avenir, lightItalic);\n  }\n}\n\n.f-light-italic {\n  @include font(avenir, lightItalic);\n  i,\n  em {\n    @include font(avenir, lightItalic);\n  }\n}\n\n.f-black {\n  @include font(avenir, black);\n  i,\n  em {\n    @include font(avenir, blackItalic);\n  }\n  b,\n  strong {\n    @include font(avenir, black);\n  }\n}\n\n.f-black-italic {\n  @include font(avenir, blackItalic);\n  i,\n  em {\n    @include font(avenir, blackItalic);\n  }\n  b,\n  strong {\n    @include font(avenir, black);\n  }\n}\n\n.f-handwriting {\n  &,\n  i,\n  em,\n  strong,\n  b {\n    @include font(handwriting);\n  }\n}\n","html {\n  font-size: 1rem;\n}\n\nhtml, body {\n  font-family: \"Avenir LT W01 65 Medium\", sans-serif;\n  font-weight: 500;\n  font-style: normal;\n  line-height: 1.42857;\n}\n\nb, strong {\n  font-family: \"Avenir LT W01 85 Heavy\", sans-serif;\n  font-weight: 700;\n  font-style: normal;\n}\n\ni, em {\n  font-family: \"AvenirLTW01-65MediumObl\", sans-serif;\n  font-weight: 500;\n  font-style: italic;\n}\n\np {\n  margin: 0 0 10px;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  line-height: 1.1;\n  margin: 10px 0;\n}\n\nh1 a, h2 a, h3 a, h4 a, h5 a, h6 a {\n  text-decoration: none;\n}\n\ninput, select, textarea {\n  font-family: \"Avenir LT W01 65 Medium\", sans-serif;\n  font-weight: 500;\n  font-style: normal;\n}\n\nlabel {\n  font-family: \"Avenir LT W01 85 Heavy\", sans-serif;\n  font-weight: 700;\n  font-style: normal;\n}\n\na {\n  color: #428bca;\n  text-decoration: none;\n}\n\nimg {\n  height: auto;\n  max-width: 100%;\n}\n\n.f-regular {\n  font-family: \"Avenir LT W01 55 Roman\", sans-serif;\n  font-weight: 400;\n  font-style: normal;\n}\n\n.f-italic {\n  font-family: \"AvenirLTW01-55Oblique\", sans-serif;\n  font-weight: 400;\n  font-style: italic;\n}\n\n.f-bold {\n  font-family: \"Avenir LT W01 85 Heavy\", sans-serif;\n  font-weight: 700;\n  font-style: normal;\n}\n\n.f-bold-italic {\n  font-family: \"AvenirLTW01-85HeavyObli\", sans-serif;\n  font-weight: 700;\n  font-style: italic;\n}\n\n.f-medium {\n  font-family: \"Avenir LT W01 65 Medium\", sans-serif;\n  font-weight: 500;\n  font-style: normal;\n}\n\n.f-medium-italic {\n  font-family: \"AvenirLTW01-65MediumObl\", sans-serif;\n  font-weight: 500;\n  font-style: italic;\n}\n\n.f-light {\n  font-family: \"Avenir LT W01 35 Light\", sans-serif;\n  font-weight: 200;\n  font-style: normal;\n}\n\n.f-light i,\n.f-light em {\n  font-family: \"AvenirLTW01-35LightObli\", sans-serif;\n  font-weight: 200;\n  font-style: italic;\n}\n\n.f-light-italic {\n  font-family: \"AvenirLTW01-35LightObli\", sans-serif;\n  font-weight: 200;\n  font-style: italic;\n}\n\n.f-light-italic i,\n.f-light-italic em {\n  font-family: \"AvenirLTW01-35LightObli\", sans-serif;\n  font-weight: 200;\n  font-style: italic;\n}\n\n.f-black {\n  font-family: \"Avenir LT W01 95 Black\", sans-serif;\n  font-weight: 700;\n  font-style: normal;\n}\n\n.f-black i,\n.f-black em {\n  font-family: \"AvenirLTW01-95BlackObli\", sans-serif;\n  font-weight: 700;\n  font-style: italic;\n}\n\n.f-black b,\n.f-black strong {\n  font-family: \"Avenir LT W01 95 Black\", sans-serif;\n  font-weight: 700;\n  font-style: normal;\n}\n\n.f-black-italic {\n  font-family: \"AvenirLTW01-95BlackObli\", sans-serif;\n  font-weight: 700;\n  font-style: italic;\n}\n\n.f-black-italic i,\n.f-black-italic em {\n  font-family: \"AvenirLTW01-95BlackObli\", sans-serif;\n  font-weight: 700;\n  font-style: italic;\n}\n\n.f-black-italic b,\n.f-black-italic strong {\n  font-family: \"Avenir LT W01 95 Black\", sans-serif;\n  font-weight: 700;\n  font-style: normal;\n}\n\n.f-handwriting,\n.f-handwriting i,\n.f-handwriting em,\n.f-handwriting strong,\n.f-handwriting b {\n  font-family: \"Los Angeles Autograph\", sans-serif;\n  font-weight: 400;\n  font-style: normal;\n}\n\n[class*='heading--'] {\n  font-family: \"Avenir LT W01 95 Black\", sans-serif;\n  font-weight: 700;\n  font-style: normal;\n  font-weight: normal;\n  margin: 0;\n  text-transform: uppercase;\n}\n\n[class*='heading--'] em {\n  font-family: \"Los Angeles Autograph\", sans-serif;\n  font-weight: 400;\n  font-style: normal;\n  display: block;\n  font-size: 130%;\n  font-weight: normal;\n  margin-bottom: -10px;\n  margin-left: 2px;\n  text-transform: none;\n}\n\n@media (max-width: 29.99em) {\n  [class*='heading--'] em {\n    padding-top: 10px;\n  }\n}\n\n.heading--sa {\n  font-size: 1.875rem;\n}\n\n@media (min-width: 62em) {\n  .heading--sa {\n    font-size: 2.5rem;\n  }\n}\n\n.heading--xs {\n  font-size: 1rem;\n  text-transform: none;\n}\n\n.heading--sm {\n  font-size: 2.25rem;\n}\n\n@media (min-width: 62em) {\n  .heading--sm {\n    font-size: 3rem;\n  }\n}\n\n@media (min-width: 75em) {\n  .heading--sm {\n    font-size: 3.75rem;\n  }\n}\n\n.heading--md {\n  font-size: 2.5rem;\n}\n\n@media (min-width: 62em) {\n  .heading--md {\n    font-size: 3.125rem;\n  }\n}\n\n@media (min-width: 75em) {\n  .heading--md {\n    font-size: 4.0625rem;\n  }\n}\n\n.heading--lg {\n  font-size: 2.8125rem;\n}\n\n@media (min-width: 48em) {\n  .heading--lg {\n    font-size: 3.125rem;\n  }\n}\n\n@media (min-width: 62em) {\n  .heading--lg {\n    font-size: 4.375rem;\n  }\n}\n\n@media (min-width: 75em) {\n  .heading--lg {\n    font-size: 5.625rem;\n  }\n}\n\n.heading--xl {\n  font-size: 3.25rem;\n}\n\n@media (min-width: 62em) {\n  .heading--xl {\n    font-size: 4.375rem;\n  }\n}\n\n@media (min-width: 75em) {\n  .heading--xl {\n    font-size: 6.25rem;\n  }\n}\n\n.text--small {\n  font-size: 0.75rem;\n}\n\n@media (min-width: 75em) {\n  .text--small {\n    font-size: 0.9375rem;\n  }\n}\n\n@media (min-width: 112.5em) {\n  .text--small {\n    font-size: 1.125rem;\n  }\n}\n\n@media (max-width: 29.99em) {\n  .hide-xs {\n    display: none;\n  }\n}\n\n@media (min-width: 30em) and (max-width: 61.99em) {\n  .hide-sm {\n    display: none;\n  }\n}\n\n@media (min-width: 62em) and (max-width: 74.99em) {\n  .hide-md {\n    display: none;\n  }\n}\n\n@media (min-width: 75em) and (max-width: 112.49em) {\n  .hide-lg {\n    display: none;\n  }\n}\n\n@media (min-width: 112.5em) {\n  .hide-xl {\n    display: none;\n  }\n}\n\n*, *::before, *::after {\n  box-sizing: border-box;\n}\n\nhtml, body {\n  margin: 0;\n  padding: 0;\n}\n","[class*='heading--'] {\n  @include font(avenir, black);\n  font-weight: normal;\n  margin: 0;\n  text-transform: uppercase;\n\n  em {\n    @include font(handwriting);\n    display: block;\n    font-size: 130%;\n    font-weight: normal;\n    margin-bottom: -10px;\n    margin-left: 2px;\n    text-transform: none;\n    @include mq($until: xs) {\n      padding-top: 10px;\n    }\n  }\n}\n\n.heading--sa {\n  @include font-size(30px);\n  @include font-size(40px, 'md');\n}\n\n.heading--xs {\n  @include font-size(16px);\n  text-transform: none;\n}\n\n.heading--sm {\n  @include font-size(36px);\n  @include font-size(48px, 'md');\n  @include font-size(60px, 'lg');\n}\n\n.heading--md {\n  @include font-size(40px);\n  @include font-size(50px, 'md');\n  @include font-size(65px, 'lg');\n}\n\n.heading--lg {\n  @include font-size(45px);\n  @include font-size(50px, 'sm');\n  @include font-size(70px, 'md');\n  @include font-size(90px, 'lg');\n}\n\n.heading--xl {\n  @include font-size(52px);\n  @include font-size(70px, 'md');\n  @include font-size(100px, 'lg');\n}\n","@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (e.g. layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width, e.g. (mobile, tablet, desktop).\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (e.g. `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @param {Number} $base-font-size ($mq-base-font-size) - `<body>` font size\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $until (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $and (false) - Additional media query parameters\n/// @param {String} $media-type ($mq-media-type) - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints ($mq-breakpoints)\n/// @ignore @param {String} $static-breakpoint ($mq-static-breakpoint)\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _mq-quick-sort($list) {\n    $less:  ();\n    $equal: ();\n    $large: ();\n\n    @if length($list) > 1 {\n        $seed: nth($list, ceil(length($list) / 2));\n\n        @each $item in $list {\n            @if ($item == $seed) {\n                $equal: append($equal, $item);\n            } @else if ($item < $seed) {\n                $less: append($less, $item);\n            } @else if ($item > $seed) {\n                $large: append($large, $item);\n            }\n        }\n\n        @return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));\n    }\n\n    @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _mq-map-sort-by-value($map) {\n    $map-sorted: ();\n    $map-keys: map-keys($map);\n    $map-values: map-values($map);\n    $map-values-sorted: _mq-quick-sort($map-values);\n\n    // Reorder key/value pairs based on key values\n    @each $value in $map-values-sorted {\n        $index: index($map-values, $value);\n        $key: nth($map-keys, $index);\n        $map-sorted: map-merge($map-sorted, ($key: $value));\n\n        // Unset the value in $map-values to prevent the loop\n        // from finding the same index twice\n        $map-values: set-nth($map-values, $index, 0);\n    }\n\n    @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints ($mq-show-breakpoints) - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints ($mq-breakpoints) - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n","// WYSIWYG\n//\n// The *Basic* editor is a CKEditor-enabled text format with very limited,\n// simplified options as well as a couple of text styles.\n\n.text--small {\n  @include font-size(12px);\n  @include font-size(15px, 'lg');\n  @include font-size(18px, 'xl');\n}\n",".hide-xs {\n  @include mq($until: xs) {\n    display: none;\n  }\n}\n\n.hide-sm {\n  @include mq($from: xs, $until: md) {\n    display: none;\n  }\n}\n\n.hide-md {\n  @include mq($from: md, $until: lg) {\n    display: none;\n  }\n}\n\n.hide-lg {\n  @include mq($from: lg, $until: xl) {\n    display: none;\n  }\n}\n\n.hide-xl {\n  @include mq(xl) {\n    display: none;\n  }\n}\n","// Global  Dependencies\n//------------------------------------------------------------------------------\n\n@import 'base';\n\n\n// Elements\n//------------------------------------------------------------------------------\n\n@import '../../_patterns/00-base/01-typography/elements';\n@import '../../_patterns/01-atoms/02-headings/elements';\n@import '../../_patterns/02-molecules/01-forms/elements';\n@import '../../_patterns/01-atoms/01-link/elements';\n@import '../../_patterns/01-atoms/05-images/elements';\n\n\n// Helpers\n//------------------------------------------------------------------------------\n\n@import '../../_patterns/00-base/01-typography/helpers';\n@import '../../_patterns/01-atoms/02-headings/helpers';\n@import '../../_patterns/01-atoms/03-text/helpers';\n@import '../../_patterns/01-atoms/10-visibility/helpers';\n\n\n*, *::before, *::after {\n  box-sizing: border-box;\n}\n\nhtml, body {\n  margin: 0;\n  padding: 0;\n}\n"]}