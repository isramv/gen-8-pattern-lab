{"version":3,"sources":["style.css","../../_patterns/01-atoms/00-button/_button.scss","../../_patterns/00-base/_mixins.scss","../../_patterns/00-base/01-typography/_variables.scss","../../../node_modules/sass-mq/_mq.scss","../../_patterns/00-base/04-spacing/_variables.scss","../../_patterns/01-atoms/05-images/_image.scss","../../_patterns/02-molecules/02-card/_card.scss","../../_patterns/00-base/00-colors/_variables.scss","../../_patterns/00-base/03-grid/_variables.scss","../../_patterns/02-molecules/03-tout/_tout.scss","../../_patterns/02-molecules/04-tile/_tile.scss","../../_patterns/02-molecules/05-header/_header.scss","../../../node_modules/susy/sass/susy/_su-math.scss","../../_patterns/02-molecules/06-list/_list.scss","../../_patterns/03-organisms/00-hero/_hero.scss","../../_patterns/03-organisms/01-feature/_feature.scss","../../_patterns/05-templates/_stats/_stats.scss","../../_patterns/02-molecules/00-styles/_styles.scss"],"names":[],"mappings":"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","file":"style.css","sourcesContent":["@charset \"UTF-8\";\n.button,\ninput.button,\nbutton.button {\n  font-family: \"Avenir LT W01 65 Medium\", sans-serif;\n  font-weight: 500;\n  font-style: normal;\n  font-size: 1rem;\n  background: transparent;\n  border: 2px solid currentColor;\n  border-radius: 0;\n  color: currentColor;\n  cursor: pointer;\n  display: inline-block;\n  margin: 10px 0;\n  padding: 5px 10px;\n}\n\n@media (min-width: 75em) {\n  .button,\n  input.button,\n  button.button {\n    font-size: 1.375rem;\n  }\n}\n\n.button + button,\n.button + .button,\ninput.button + button,\ninput.button + .button,\nbutton.button + button,\nbutton.button + .button {\n  margin-left: 20px;\n}\n\na.button {\n  text-decoration: none;\n}\n\n.button--more {\n  font-size: 1rem;\n  font-family: \"Avenir LT W01 85 Heavy\", sans-serif;\n  font-weight: 700;\n  font-style: normal;\n  border: 0;\n  padding: 0;\n}\n\n@media (min-width: 75em) {\n  .button--more {\n    font-size: 1.125rem;\n  }\n}\n\n.button--more::after {\n  border: 1px solid currentColor;\n  content: 'âžž';\n  margin-left: 5px;\n  padding: 0 5px;\n}\n\na.button--more {\n  text-decoration: none;\n}\n\n.button--link {\n  font-size: 0.75rem;\n  border: 0;\n  margin: 20px 0 10px 0;\n  padding: 0;\n  text-transform: none;\n}\n\n@media (min-width: 48em) {\n  .button--link {\n    font-size: 0.9375rem;\n  }\n}\n\n@media (min-width: 62em) {\n  .button--link {\n    font-size: 1.25rem;\n  }\n}\n\n.button--link, .style--default .button--link {\n  color: #36acef;\n}\n\n.button--link + .button {\n  margin-left: 10px;\n}\n\n.button--link .fa:first-child {\n  margin-right: 10px;\n}\n\n.button--link .fa:only-child {\n  margin-right: 0;\n}\n\n@media (min-width: 62em) {\n  .card--profile .button--link {\n    font-size: 1rem;\n  }\n}\n\n.buttons {\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n\n.fa {\n  margin-right: 5px;\n}\n\n@media (min-width: 75em) {\n  .list .button,\n  .list input.button,\n  .list button.button {\n    font-size: 1rem;\n  }\n}\n\n.image {\n  line-height: 0;\n  overflow: hidden;\n}\n\n.bg-image div {\n  display: block;\n}\n\n@media (min-width: 48em) {\n  .bg-image div {\n    align-items: stretch;\n    display: block;\n    width: 100%;\n  }\n}\n\n.bg-image img {\n  display: block;\n  flex: 1;\n  object-fit: cover;\n}\n\n.bg-image {\n  display: block;\n  height: 100%;\n  max-height: 90vh;\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n}\n\n.bg-image .image__container {\n  background-position: 50%;\n  background-repeat: no-repeat;\n  background-size: cover;\n  display: block;\n  height: 100%;\n  width: 100%;\n}\n\n.bg-image .image__container::before {\n  content: '';\n  display: block;\n  padding-bottom: 75%;\n  width: 100%;\n}\n\na.paragraph--type--image img {\n  width: 100%;\n}\n\n.card {\n  background: #fff;\n  color: #000;\n}\n\n@media (max-width: 29.99em) {\n  .card {\n    margin-bottom: 50px;\n    text-align: justify;\n  }\n}\n\n.card__title {\n  font-family: \"Avenir LT W01 85 Heavy\", sans-serif;\n  font-weight: 700;\n  font-style: normal;\n  font-size: 1.0625rem;\n  margin-bottom: 5px;\n  text-transform: none;\n}\n\n.card__title a {\n  color: currentColor;\n  text-decoration: none;\n}\n\n.style--default .card .card__title a {\n  color: #000;\n}\n\n.card__media {\n  margin-bottom: 20px;\n}\n\n.card__date {\n  display: block;\n  margin-bottom: 20px;\n}\n\n.card--profile {\n  display: grid;\n  grid-column-gap: 20px;\n  grid-template-columns: 100px auto;\n  grid-template-rows: 20px auto;\n  padding: 20px 0;\n  text-align: left;\n}\n\n@media (min-width: 48em) {\n  .card--profile {\n    display: block;\n    margin-bottom: 0;\n    padding-top: 0;\n  }\n}\n\n.card--profile .card__media {\n  grid-column: 1 / span 1;\n  grid-row: 1 / span 2;\n  margin-bottom: 0;\n}\n\n@media (min-width: 48em) {\n  .card--profile .card__media {\n    width: 100%;\n  }\n}\n\n@media (min-width: 48em) {\n  .card--profile .card__body {\n    padding-left: 10px;\n    padding-right: 10px;\n  }\n}\n\n@media (min-width: 62em) {\n  .card--profile .card__body {\n    padding-left: 20px;\n    padding-right: 20px;\n  }\n}\n\n.card--profile .card__title {\n  color: #000;\n  grid-column: 2 / span 1;\n  grid-row: 1 / span 1;\n}\n\n@media (min-width: 48em) {\n  .card--profile .card__title {\n    font-size: 1rem;\n  }\n}\n\n.card--profile .card__content {\n  font-family: \"Avenir LT W01 85 Heavy\", sans-serif;\n  font-weight: 700;\n  font-style: normal;\n  font-size: 0.75rem;\n  color: #666;\n  grid-column: 2 / span 1;\n  grid-row: 2 / span 1;\n}\n\n@media (min-width: 48em) {\n  .card--profile .card__content {\n    font-size: 1rem;\n  }\n}\n\n@media (min-width: 48em) {\n  .card--profile .card__content {\n    font-family: \"Avenir LT W01 65 Medium\", sans-serif;\n    font-weight: 500;\n    font-style: normal;\n  }\n}\n\n.layout__container .layout__item.paragraph--type--card .card--article {\n  padding-bottom: 30px;\n  padding-left: 15px;\n  padding-right: 15px;\n  padding-top: 30px;\n}\n\n.tout {\n  background-repeat: no-repeat;\n  background-size: cover;\n  display: flex;\n  height: 100%;\n  min-height: 415px;\n}\n\n.tout__container {\n  padding: 30px 40px;\n}\n\n@media (min-width: 48em) {\n  .tout__container {\n    padding: 70px 60px 40px 60px;\n  }\n}\n\n.tout__body {\n  font-size: 1rem;\n}\n\n@media (min-width: 75em) {\n  .tout__body {\n    font-size: 1.375rem;\n  }\n}\n\n.twocol-tout-image + .twocol-tout-image:nth-child(even) .layout__item:last-child {\n  order: -1;\n}\n\n.tile {\n  align-items: stretch;\n  display: flex;\n}\n\n.tile img {\n  display: block;\n}\n\n.tile .tile__image-hover {\n  display: none;\n}\n\n.tile:hover .tile__image {\n  display: none;\n}\n\n.tile:hover .tile__image-hover {\n  display: block;\n}\n\n.header {\n  padding-bottom: 30px;\n  padding-left: 30px;\n  padding-right: 30px;\n  padding-top: 30px;\n}\n\n.header, .header.style--default {\n  background-color: #f5f5f5;\n}\n\n@media (min-width: 48em) {\n  .header {\n    margin-bottom: 0;\n    padding-left: 0;\n    padding-right: 0;\n  }\n}\n\n.header .layout__container {\n  padding-left: calc(((100% - 330px) / 12 * 1));\n  padding-right: calc(((100% - 330px) / 12 * 1));\n}\n\n@media (min-width: 48em) {\n  @supports (display: grid) {\n    .header .layout__container {\n      align-items: center;\n      grid-gap: 0 30px;\n    }\n  }\n}\n\n.header__link {\n  display: none;\n}\n\n@media (min-width: 48em) {\n  .header__link {\n    display: inline-block;\n    float: right;\n  }\n}\n\n.list {\n  display: inline-block;\n  padding: 20px;\n}\n\n.list, .list.style--default {\n  background-color: #fff;\n}\n\n.list__title {\n  font-family: \"Avenir LT W01 95 Black\", sans-serif;\n  font-weight: 700;\n  font-style: normal;\n  font-size: 1.125rem;\n}\n\n.list__items {\n  list-style: none;\n  padding-left: 0;\n}\n\n.list__item {\n  margin-bottom: 15px;\n}\n\n.list__item a {\n  font-family: \"Avenir LT W01 85 Heavy\", sans-serif;\n  font-weight: 700;\n  font-style: normal;\n  font-size: 1rem;\n}\n\n.hero {\n  background-position: 50% 50%;\n  background-repeat: no-repeat;\n  background-size: cover;\n  height: 380px;\n  max-width: 100%;\n  min-height: 280px;\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n}\n\n@media (min-width: 48em) {\n  .hero {\n    height: 450px;\n  }\n}\n\n@media (min-width: 62em) {\n  .hero {\n    height: 500px;\n  }\n}\n\n@media (min-width: 75em) {\n  .hero {\n    height: 650px;\n  }\n}\n\n.hero .hero__container {\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: flex-start;\n  position: absolute;\n  width: 100%;\n}\n\n.hero .hero__content {\n  margin: 0;\n  overflow: hidden;\n  padding: 0 calc(30px + ((100% - 330px) / 12 * 2));\n  z-index: 1;\n}\n\n@media (min-width: 48em) {\n  .hero .hero__content {\n    padding: 0 calc(((100% - 330px) / 12 * 1));\n  }\n}\n\n@media (min-width: 62em) {\n  .hero .hero__content {\n    padding: 0 calc(90px + ((100% - 330px) / 12 * 4)) 0 calc(((100% - 330px) / 12 * 1));\n  }\n}\n\n.hero .hero__content h1 {\n  margin: 0;\n}\n\n.hero-has-video .hero__video {\n  bottom: 0;\n  height: 100%;\n  left: 0;\n  pointer-events: none;\n  position: absolute;\n  right: 0;\n  top: 0;\n  width: 100%;\n  z-index: 0;\n}\n\n@media (max-width: 61.99em) {\n  .hero-has-video .hero__video {\n    display: none;\n  }\n}\n\n.hero-has-video .hero__video iframe {\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n}\n\n@media (min-width: 48em) {\n  .hero-style-default .hero__content {\n    padding-left: calc(((100% - 330px) / 12 * 1));\n    padding-right: calc(120px + ((100% - 330px) / 12 * 4));\n  }\n}\n\n@media (min-width: 48em) {\n  .hero-style-right .hero__container {\n    align-content: flex-end;\n    justify-content: flex-end;\n  }\n}\n\n@media (min-width: 48em) {\n  .hero-style-right .hero__content {\n    padding-left: calc(150px + ((100% - 330px) / 12 * 5));\n    padding-right: calc(((100% - 330px) / 12 * 1));\n  }\n}\n\n@media (min-width: 48em) {\n  .hero-style-left .hero__container {\n    align-content: flex-start;\n    justify-content: flex-start;\n  }\n}\n\n@media (min-width: 48em) {\n  .hero-style-left .hero__content {\n    padding-left: calc(((100% - 330px) / 12 * 1));\n    padding-right: calc(150px + ((100% - 330px) / 12 * 5));\n  }\n}\n\n.hero-style-article {\n  max-height: 350px;\n}\n\n.hero-style-article .hero__content {\n  padding: 0 calc(30px + ((100% - 330px) / 12 * 1));\n}\n\n@media (min-width: 62em) {\n  .hero-style-article .hero__content {\n    margin-left: 15%;\n    padding: 0;\n    width: 85%;\n  }\n}\n\n.hero-style-short {\n  max-height: 290px;\n}\n\n.feature {\n  background-position: 50% 50%;\n  background-repeat: no-repeat;\n  background-size: cover;\n  height: 380px;\n  max-width: 100%;\n  min-height: 280px;\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n}\n\n@media (min-width: 48em) {\n  .feature {\n    height: 450px;\n  }\n}\n\n@media (min-width: 62em) {\n  .feature {\n    height: 500px;\n  }\n}\n\n@media (min-width: 75em) {\n  .feature {\n    height: 650px;\n  }\n}\n\n.feature .feature__container {\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: flex-start;\n  position: absolute;\n  width: 100%;\n}\n\n.feature .feature__content {\n  margin: 0;\n  overflow: hidden;\n  padding: 0 calc(30px + ((100% - 330px) / 12 * 2));\n  z-index: 1;\n}\n\n@media (min-width: 48em) {\n  .feature .feature__content {\n    padding: 0 calc(((100% - 330px) / 12 * 1)) 0 calc(120px + ((100% - 330px) / 12 * 4));\n  }\n}\n\n@media (min-width: 62em) {\n  .feature .feature__content {\n    padding: 0 calc(90px + ((100% - 330px) / 12 * 4)) 0 calc(((100% - 330px) / 12 * 1));\n  }\n}\n\n@media (min-width: 48em) {\n  .feature--right .feature__container {\n    align-content: flex-end;\n    justify-content: flex-end;\n  }\n}\n\n@media (min-width: 48em) {\n  .feature--right .feature__content {\n    padding-left: calc(150px + ((100% - 330px) / 12 * 5));\n    padding-right: calc(((100% - 330px) / 12 * 1));\n  }\n}\n\n@media (min-width: 48em) {\n  .feature---left .feature__container {\n    align-content: flex-start;\n    justify-content: flex-start;\n  }\n}\n\n@media (min-width: 48em) {\n  .feature---left .feature__content {\n    padding-left: calc(((100% - 330px) / 12 * 1));\n    padding-right: calc(150px + ((100% - 330px) / 12 * 5));\n  }\n}\n\n.stats {\n  height: 100%;\n}\n\n.style--default {\n  background-color: #fff;\n  color: #333;\n}\n\n.style--default a:not([class*='button']) {\n  color: #428bca;\n}\n\n.style--transparent {\n  background-color: transparent;\n  color: #333;\n}\n\n.style--transparent a:not([class*='button']) {\n  color: #428bca;\n}\n\n.style--black {\n  background-color: #000;\n}\n\n.style--black, .style--black a:not([class*='button']) {\n  color: #fff;\n}\n\n.style--blue {\n  background-color: #004b87;\n}\n\n.style--blue, .style--blue a:not([class*='button']) {\n  color: #fff;\n}\n\n.style--blue-light {\n  background-color: #0095c8;\n}\n\n.style--blue-light, .style--blue-light a:not([class*='button']) {\n  color: #fff;\n}\n\n.style--gray {\n  background-color: #666;\n}\n\n.style--gray, .style--gray a:not([class*='button']) {\n  color: #fff;\n}\n\n.style--gray-light {\n  background-color: #f5f5f5;\n}\n\n.style--gray-light, .style--gray-light a:not([class*='button']) {\n  color: #000;\n}\n\n.style--green {\n  background-color: #97d700;\n}\n\n.style--green, .style--green a:not([class*='button']) {\n  color: #fff;\n}\n\n.style--orange {\n  background-color: #ff6900;\n}\n\n.style--orange, .style--orange a:not([class*='button']) {\n  color: #fff;\n}\n\n.style--purple {\n  background-color: #409;\n}\n\n.style--purple, .style--purple a:not([class*='button']) {\n  color: #fff;\n}\n\n.style--red {\n  background-color: #da291c;\n}\n\n.style--red, .style--red a:not([class*='button']) {\n  color: #fff;\n}\n\n.style--yellow {\n  background-color: #fcf301;\n}\n\n.style--yellow, .style--yellow a:not([class*='button']) {\n  color: #000;\n}\n\n.style--white {\n  background-color: #fff;\n}\n\n.style--white, .style--white a:not([class*='button']) {\n  color: #333;\n}\n",".button,\ninput.button,\nbutton.button {\n  @include font('avenir', 'medium');\n  @include font-size(16px);\n  @include font-size(22px, 'lg');\n  background: transparent;\n  border: 2px solid currentColor;\n  border-radius: 0;\n  color: currentColor;\n  cursor: pointer;\n  display: inline-block;\n  margin: 10px 0;\n  padding: 5px 10px;\n\n  & + button,\n  & + .button {\n    margin-left: $spacer-md;\n  }\n}\n\na.button {\n  text-decoration: none;\n}\n\n\n// Button style: More\n//------------------------------------------------------------------------------\n\n.button--more {\n  @include font-size(16px);\n  @include font-size(18px, 'lg');\n  @include font('avenir', 'bold');\n  border: 0;\n  padding: 0;\n\n  &::after {\n    border: 1px solid currentColor;\n    content: 'âžž';\n    margin-left: 5px;\n    padding: 0 5px;\n  }\n}\n\na.button--more {\n  text-decoration: none;\n}\n\n\n// Button style: Link\n//------------------------------------------------------------------------------\n\n.button--link {\n  @include font-size(12px);\n  @include font-size(15px, 'sm');\n  @include font-size(20px, 'md');\n  border: 0;\n  margin: $spacer-md 0 $spacer 0;\n  padding: 0;\n  text-transform: none;\n\n  &, .style--default & {\n    color: #36acef;\n  }\n\n  & + .button {\n    margin-left: $spacer;\n  }\n\n  .fa:first-child {\n    margin-right: $spacer;\n  }\n\n  .fa:only-child {\n    margin-right: 0;\n  }\n\n  .card--profile & {\n    @include font-size(16px, 'md');\n }\n}\n\n// Button wrapper\n// @todo build in the aligment options to button group!\n//------------------------------------------------------------------------------\n\n.buttons {\n  // float: left;\n  margin-bottom: $spacer;\n  // margin-left: 0;\n  // margin-right: $spacer;\n  margin-top: $spacer;\n  // &--align-right {\n  //   float: right;\n  // }\n  // &--align-left {\n  //   float: left;\n  // }\n  // &--align-center {\n  //   float: none;\n  //   display: block;\n  //   text-align: center;\n  // }\n}\n\n.fa {\n  margin-right: 5px;\n}\n\n// // Button in List component\n// // Responsive behavior of a button inside the list component.\n// ////////////////////////////////////////////////////////////////////////////////\n.list {\n  .button,\n  input.button,\n  button.button {\n    @include font-size(16px, 'lg');\n  }\n}\n","// Clearfix\n//------------------------------------------------------------------------------\n\n@mixin clearfix {\n  &::after,\n  &::before {\n    content: '';\n    display: table;\n  }\n  &::after {\n    clear: both;\n  }\n}\n\n// Font Size\n//------------------------------------------------------------------------------\n// @example\n//   @include font-size(12px);\n//   @include font-size(12px, 'lg');\n//------------------------------------------------------------------------------\n\n@mixin font-size($size: $base-font-size, $breakpoint: null) {\n  @if ($breakpoint != null) {\n    @include mq($breakpoint) {\n      font-size: $size / 16px * 1rem;\n    }\n  } @else {\n    font-size: $size / 16px * 1rem;\n  }\n}\n\n// Font\n//------------------------------------------------------------------------------\n// @example\n//   @include font('avenir', 'light');\n//   @include font('handwriting', 'regular', 'family');\n//------------------------------------------------------------------------------\n\n@mixin font($group, $variant: regular, $properties: family weight style, $font-stack: $base-font-stack) {\n  $font-properties: map-deep-get($font-stack, $group, $variant);\n  @if $font-properties {\n    @each $property, $values in $font-properties {\n      @if contains($properties, $property) {\n        @if $property == 'family' {\n          font-#{$property}: unquote(map-get($font-properties, $property));\n        }\n        @else {\n          font-#{$property}: map-get($font-properties, $property);\n        }\n      }\n    }\n  }\n}\n\n// Visually Hidden\n//\n// Hides elements visually, but keep them available for screen readers. For\n// elements that need to be focusable (e.g. a, button, input, select, textarea)\n// use `true` parameter to maintain focusability.\n//\n// Note: This is also avaialble as a helper class, `.visually-hidden` or\n// `visually-hidden-focusable`.\n//\n// @param {bool} $focusable - Whether the target selector is focusable.\n//\n// @example\n//    div {\n//      @include visually-hidden;\n//    }\n//    a {\n//      @include visually-hidden(true);\n//    }\n//------------------------------------------------------------------------------\n\n@mixin visually-hidden($focusable: false) {\n  & {\n    clip: rect(1px, 1px, 1px, 1px);\n    height: 1px;\n    overflow: hidden;\n    position: absolute !important;\n    width: 1px;\n    word-wrap: normal;\n    @if ($focusable) {\n      &:active,\n      &:focus {\n        clip: auto;\n        height: auto;\n        overflow: visible;\n        position: static !important;\n        width: auto;\n      }\n    }\n  }\n}\n","$base-font-size: 16px;\n$base-line-height: 1.428571429;\n\n$base-font-stack: (\n  avenir: (\n    light: (\n      family: '\"Avenir LT W01 35 Light\", sans-serif',\n      weight: 200,\n      style: normal\n    ),\n    lightItalic: (\n      family: '\"AvenirLTW01-35LightObli\", sans-serif',\n      weight: 200,\n      style: italic\n    ),\n    regular: (\n      family: '\"Avenir LT W01 55 Roman\", sans-serif',\n      weight: 400,\n      style: normal\n    ),\n    italic: (\n      family: '\"AvenirLTW01-55Oblique\", sans-serif',\n      weight: 400,\n      style: italic\n    ),\n    medium: (\n      family: '\"Avenir LT W01 65 Medium\", sans-serif',\n      weight: 500,\n      style: normal\n    ),\n    mediumItalic: (\n      family: '\"AvenirLTW01-65MediumObl\", sans-serif',\n      weight: 500,\n      style: italic\n    ),\n    bold: (\n      family: '\"Avenir LT W01 85 Heavy\", sans-serif',\n      weight: 700,\n      style: normal\n    ),\n    boldItalic: (\n      family: '\"AvenirLTW01-85HeavyObli\", sans-serif',\n      weight: 700,\n      style: italic\n    ),\n    black: (\n      family: '\"Avenir LT W01 95 Black\", sans-serif',\n      weight: 700,\n      style: normal\n    ),\n    blackItalic: (\n      family: '\"AvenirLTW01-95BlackObli\", sans-serif',\n      weight: 700,\n      style: italic\n    )\n  ),\n  handwriting: (\n    regular: (\n      family: '\"Los Angeles Autograph\", sans-serif',\n      weight: 400,\n      style: normal\n    )\n  )\n);\n","@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (e.g. layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width, e.g. (mobile, tablet, desktop).\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (e.g. `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and â€¦`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @param {Number} $base-font-size ($mq-base-font-size) - `<body>` font size\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $until (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $and (false) - Additional media query parameters\n/// @param {String} $media-type ($mq-media-type) - Media type: screen, printâ€¦\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints ($mq-breakpoints)\n/// @ignore @param {String} $static-breakpoint ($mq-static-breakpoint)\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _mq-quick-sort($list) {\n    $less:  ();\n    $equal: ();\n    $large: ();\n\n    @if length($list) > 1 {\n        $seed: nth($list, ceil(length($list) / 2));\n\n        @each $item in $list {\n            @if ($item == $seed) {\n                $equal: append($equal, $item);\n            } @else if ($item < $seed) {\n                $less: append($less, $item);\n            } @else if ($item > $seed) {\n                $large: append($large, $item);\n            }\n        }\n\n        @return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));\n    }\n\n    @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _mq-map-sort-by-value($map) {\n    $map-sorted: ();\n    $map-keys: map-keys($map);\n    $map-values: map-values($map);\n    $map-values-sorted: _mq-quick-sort($map-values);\n\n    // Reorder key/value pairs based on key values\n    @each $value in $map-values-sorted {\n        $index: index($map-values, $value);\n        $key: nth($map-keys, $index);\n        $map-sorted: map-merge($map-sorted, ($key: $value));\n\n        // Unset the value in $map-values to prevent the loop\n        // from finding the same index twice\n        $map-values: set-nth($map-values, $index, 0);\n    }\n\n    @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints ($mq-show-breakpoints) - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints ($mq-breakpoints) - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} â‰¥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n","$spacer: 10px;\n\n$spacer-xs: ($spacer * 0.5);\n$spacer-sm: $spacer;\n$spacer-md: ($spacer * 2);\n$spacer-lg: ($spacer * 3);\n$spacer-xl: ($spacer * 4);\n\n$spacing: (\n  xs: $spacer-xs,\n  sm: $spacer-sm,\n  md: $spacer-md,\n  lg: $spacer-lg,\n  xl: $spacer-xl\n);\n","\n// Image\n//\n// The image component is offered via the 'Image' Paragraph bundle. There are\n// currently 2 options, inline and background (cover) which are detailed below.\n//------------------------------------------------------------------------------\n\n.image {\n  line-height: 0; // Prevent subtle gaps\n  overflow: hidden;\n}\n\n\n// Inline\n\n//\n// The *Inline* option image is an option of the Image Paragraphs component\n// which is offered as an option in the *Image style* field of the *Image*\n// Paragraph entity. The resulting style is a standard inline image that\n// covers 100% of the container. It's recommended to use when you'd like the\n// image to dictate, and potentially expand the height of its parent row, and\n// the neighboring elements.\n//\n// Markup:\n// <div class=\"layout__item paragraph-type--image image image--default\" style=\"max-height: 50vh;\">\n//   <div class=\"field field--name-field-image field--type-image field--label-hidden field__item\">\n//     <img src=\"/themes/base/img/dist/kss/image.jpg\" alt=\"Example large image\">\n//   </div>\n// </div>\n//\n//------------------------------------------------------------------------------\n\n.bg-image {\n  div {\n    display: block;\n\n    @include mq(sm) {\n      align-items: stretch;\n      display: block;\n      width: 100%;\n    }\n  }\n\n  img {\n    display: block;\n    flex: 1;\n    object-fit: cover;\n  }\n}\n\n\n// Background\n//\n// The *Background image* option image is an option of the Image Paragraphs\n// component which is offered as an option in the *Image style* field of the\n// *Image* Paragraph entity. The resulting style is a background image that\n// covers 100% of the container. It's recommended to use this option when you\n// don't want the image dimensions to expand the height of its parent row, and\n// the neighboring elements, but instead to fit neatly into the space available.\n//\n// Markup:\n// <div class=\"layout__item image image--background\"\n// style=\"background-image: url('/themes/base/img/dist/kss/image.jpg');\"> </div>\n//\n//------------------------------------------------------------------------------\n\n.bg-image {\n  display: block;\n  height: 100%;\n  max-height: 90vh;\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n\n  .image__container {\n    background-position: 50%;\n    background-repeat: no-repeat;\n    background-size: cover;\n    display: block;\n    height: 100%;\n    width: 100%;\n\n    &::before {\n      content: '';\n      display: block;\n      padding-bottom: 75%; // 4:3\n      width: 100%;\n    }\n  }\n}\n\na.paragraph--type--image {\n  img {\n    width: 100%;\n  }\n}\n",".card {\n  background: color(white);\n  color: color(black);\n\n  @include mq($until: xs) {\n    margin-bottom: 50px;\n    text-align: justify;\n  }\n\n  &__title {\n    @include font('avenir', 'bold');\n    @include font-size(17px);\n    margin-bottom: 5px;\n    text-transform: none;\n\n    a {\n      color: currentColor;\n      text-decoration: none;\n    }\n  }\n\n  .style--default & .card__title a {\n    color: color(black);\n  }\n\n  &__media {\n    margin-bottom: $spacer-md;\n  }\n\n  &__date {\n    display: block;\n    margin-bottom: $spacer-md;\n  }\n}\n\n.card--profile {\n  display: grid;\n  grid-column-gap: $spacer-md;\n  grid-template-columns: 100px auto;\n  grid-template-rows: $spacer-md auto;\n  padding: $spacer-md 0;\n  text-align: left;\n\n  @include mq(sm) {\n    display: block;\n    margin-bottom: 0;\n    padding-top: 0;\n  }\n\n  .card__media {\n    grid-column: 1 / span 1;\n    grid-row: 1 / span 2;\n    margin-bottom: 0;\n\n    @include mq(sm) {\n      width: 100%;\n    }\n  }\n\n  .card__body {\n    @include mq(sm) {\n      padding-left: $spacer-sm;\n      padding-right: $spacer-sm;\n    }\n\n    @include mq(md) {\n      padding-left: $spacer-md;\n      padding-right: $spacer-md;\n    }\n  }\n\n  // @todo let this be the default h3 style?\n  .card__title {\n    color: color(black);\n    grid-column: 2 / span 1;\n    grid-row: 1 / span 1;\n\n    @include mq(sm) {\n      @include font-size(16px);\n    }\n  }\n\n  .card__content {\n    @include font('avenir', 'bold');\n    @include font-size(12px);\n    @include font-size(16px, 'sm');\n    color: #666;\n    grid-column: 2 / span 1;\n    grid-row: 2 / span 1;\n\n    @include mq(sm) {\n      @include font('avenir', 'medium');\n    }\n  }\n}\n\n.layout__container {\n  .layout__item.paragraph--type--card {\n    .card--article {\n      padding-bottom: $grid-column-gap;\n      padding-left: $grid-column-gap / 2;\n      padding-right: $grid-column-gap / 2;\n      padding-top: $grid-column-gap;\n    }\n  }\n}\n","$colors: (\n  white: #fff,\n  black: #000,\n  dark-gray: #313131,\n  black-two: #333,\n  medium-gray: #666,\n  waterloo: #838595,\n  oslo-gray: #878a8f,\n  greyish: #aca39a,\n  border-gray: #d9d9d9,\n  article-gray: #f3f3f3,\n  ebb: #f4f2f1,\n  light-gray: #f5f5f5,\n  secondary-red-2: #b52800,\n  milano-red: #c00f02,\n  secondary-red: #ce0037,\n  secondary-red-3: #d81e05,\n  red: #da291c,\n  pomegranate: #ef382a,\n  orange: #ff6900,\n  secondary-orange: #ffa300,\n  yellow: #fcf301,\n  japanese-laurel: #0a8b13,\n  apple: #41ad48,\n  olive: #7a9a01,\n  green: #97d700,\n  lime: #b5bd00,\n  dark-blue: #003c6e,\n  blue: #004b87,\n  curious-blue: #2e94c6,\n  sky-blue: #0095c8,\n  turquoise: #00a9ce,\n  link-blue: #428bca,\n  shakespeare: #58a9d1,\n  baby-blue: #d5eaf6,\n  indigo: #409,\n  magenta: #c6007e,\n  eggplant: #aa0061\n);\n\n$color-background: #fff;\n$color-foreground: #333;\n","\n$grid-columns: 12;\n$grid-container: 100%;\n$grid-column-gap: 30px;\n$grid-row-gap: 0;\n$grid-gutter: $grid-row-gap $grid-column-gap;\n$grid-gutter-susy: 30px;\n$grid-row-min-height: 50px;\n\n","\n.tout {\n  background-repeat: no-repeat;\n  background-size: cover;\n  display: flex;\n  height: 100%;\n  min-height: 415px;\n\n  &__container {\n    padding: 30px 40px;\n    @include mq(sm) {\n      padding: 70px 60px 40px 60px;\n    }\n  }\n\n  &__body {\n    @include font-size(16px);\n    @include font-size(22px, 'lg');\n  }\n}\n\n\n.twocol-tout-image + .twocol-tout-image:nth-child(even) .layout__item:last-child {\n  order: -1;\n}\n","// Tile\n//\n// The tile component is both independent and Paragraph-enabled. This means\n// that the `tile.twig` template can be used independently in Drupal templates\n// via twig, and that it also has a [Paragraph entity](/admin/structure/paragraphs_type/tile)\n// in Drupal that editors can use to create Tile content in the administrative\n// UI with the following fields:\n//\n// - *Tile image* `field_image`: The main image that displays inside the tile.\n// - *Tile image hover* `field_image_hover`: The image that displays when hovering\n//   over the main tile image.\n// - *Tile link* `field_link`: An optional link field that be used to provide a\n//   URL for the tile.\n// - *Tile style* `field_style`: Provides access to the style component in order\n//   to assign a background and text color that best matches the uploaded image.\n//\n// Markup:\n// <aside class=\"tile layout__item paragraph--type--tile style--blue tile--hover\" style=\"display: inline-block;\">\n//   <div class=\"field field--name-field-image field--type-entity-reference field--label-hidden field__item\">\n//     <img src=\"/sites/default/files/images/2017-10/mla-home-stats-1.jpg\" width=\"584\" height=\"584\">\n//   </div>\n//   <div class=\"field tile__image-hover field--type-entity-reference field--label-hidden field__item\">\n//     <img src=\"/sites/default/files/images/2017-10/factoids-sun-reveal.jpg\" width=\"585\" height=\"585\">\n//   </div>\n// </aside>\n//\n// Style guide: Components.Tile\n\n.tile {\n  align-items: stretch;\n  display: flex;\n  img {\n    display: block;\n  }\n  .tile__image-hover {\n    display: none;\n  }\n  &:hover {\n    .tile__image {\n      display: none;\n    }\n    .tile__image-hover {\n      display: block;\n    }\n  }\n}\n",".header {\n  padding-bottom: $spacer-lg;\n  padding-left: gutter(); // sass-lint:disable empty-args\n  padding-right: gutter(); // sass-lint:disable empty-args\n  padding-top: $spacer-lg;\n\n  &, &.style--default {\n    background-color: color(light-gray);\n  }\n\n  @include mq(sm) {\n    margin-bottom: 0;\n    padding-left: 0;\n    padding-right: 0;\n  }\n\n  .layout__container {\n    padding-left: span(1);\n    padding-right: span(1);\n    @include mq(sm) {\n      @supports (display: grid) {\n        align-items: center;\n        grid-gap: 0 gutter(); // sass-lint:disable empty-args\n      }\n    }\n  }\n}\n\n.header__link {\n  display: none;\n  @include mq(sm) {\n    display: inline-block;\n    float: right;\n  }\n}\n","/// Grid Math Engine\n/// ================\n/// The `su` functions give you direct access to the math layer,\n/// without any syntax-sugar like shorthand parsing, and normalization.\n/// If you prefer named arguments, and stripped-down syntax,\n/// you can use these functions directly in your code â€“\n/// replacing `span`, `gutter`, and `slice`.\n///\n/// These functions are also useful\n/// for building mixins or other extensions to Susy.\n/// Apply the Susy syntax to new mixins and functions,\n/// using our \"Plugin Helpers\",\n/// or write your own syntax and pass the normalized results along\n/// to `su` for compilation.\n///\n/// @group su-math\n///\n/// @see su-span\n/// @see su-gutter\n/// @see su-slice\n/// @ignore _su-sum\n/// @ignore _su-calc-span\n/// @ignore _su-calc-sum\n/// @ignore _su-needs-calc-output\n\n\n\n// Su Span\n// -------\n/// Calculates and returns a CSS-ready span width,\n/// based on normalized span and context data â€“\n/// a low-level version of `susy-span`,\n/// with all of the logic and none of the syntax sugar.\n///\n/// - Grids defined with unitless numbers will return `%` values.\n/// - Grids defined with comparable units\n///   will return a value in the units provided.\n/// - Grids defined with a mix of units,\n///   or a combination of untiless numbers and unit-lengths,\n///   will return a `calc()` string.\n///\n/// @group su-math\n/// @see susy-span\n///\n/// @param {number | list} $span -\n///   Number or list of grid columns to span\n/// @param {list} $columns -\n///   List of columns available\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {0 | 1 | -1} $container-spread [$spread] -\n///   Number of gutters spanned,\n///   relative to `columns` count\n/// @param {integer} $location [1] -\n///   Optional position of sub-span among full set of columns\n///\n/// @return {length} -\n///   Relative or static length of a span on the grid\n@function su-span(\n  $span,\n  $columns,\n  $gutters,\n  $spread,\n  $container-spread: $spread,\n  $location: 1\n) {\n  $span: su-valid-span($span);\n  $columns: su-valid-columns($columns);\n  $gutters: su-valid-gutters($gutters);\n  $spread: su-valid-spread($spread);\n\n  @if (type-of($span) == 'number') {\n    @if (not unitless($span)) {\n      @return $span;\n    }\n\n    $location: su-valid-location($span, $location, $columns);\n    $span: su-slice($span, $columns, $location, $validate: false);\n  }\n\n  @if _su-needs-calc-output($span, $columns, $gutters, $spread, not 'validate') {\n    @return _su-calc-span($span, $columns, $gutters, $spread, $container-spread, not 'validate');\n  }\n\n  $span-width: _su-sum($span, $gutters, $spread, $validate: false);\n\n  @if unitless($span-width) {\n    $container-spread: su-valid-spread($container-spread);\n    $container: _su-sum($columns, $gutters, $container-spread, $validate: false);\n    @return percentage($span-width / $container);\n  }\n\n  @return $span-width;\n}\n\n\n\n// Su Gutter\n// ---------\n/// Calculates and returns a CSS-ready gutter width,\n/// based on normalized grid data â€“\n/// a low-level version of `susy-gutter`,\n/// with all of the logic and none of the syntax sugar.\n///\n/// - Grids defined with unitless numbers will return `%` values.\n/// - Grids defined with comparable units\n///   will return a value in the units provided.\n/// - Grids defined with a mix of units,\n///   or a combination of untiless numbers and unit-lengths,\n///   will return a `calc()` string.\n///\n/// @group su-math\n/// @see susy-gutter\n///\n/// @param {list} $columns -\n///   List of columns in the grid\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $container-spread -\n///   Number of gutters spanned,\n///   relative to `columns` count\n///\n/// @return {length} -\n///   Relative or static length of one gutter in a grid\n@function su-gutter(\n  $columns,\n  $gutters,\n  $container-spread\n) {\n  @if (type-of($gutters) == 'number') {\n    @if ($gutters == 0) or (not unitless($gutters)) {\n      @return $gutters;\n    }\n  }\n\n  @if _su-needs-calc-output($gutters, $columns, $gutters, -1, not 'validate') {\n    @return _su-calc-span($gutters, $columns, $gutters, -1, $container-spread, not 'validate');\n  }\n\n  $container: _su-sum($columns, $gutters, $container-spread);\n  @return percentage($gutters / $container);\n}\n\n\n\n// Su Slice\n// --------\n/// Returns a list of columns\n/// based on a given span/location slice of the grid â€“\n/// a low-level version of `susy-slice`,\n/// with all of the logic and none of the syntax sugar.\n///\n/// @group su-math\n/// @see susy-slice\n///\n/// @param {number} $span -\n///   Number of grid columns to span\n/// @param {list} $columns -\n///   List of columns in the grid\n/// @param {number} $location [1] -\n///   Starting index of a span in the list of columns\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {list} -\n///   Subset list of grid columns, based on span and location\n@function su-slice(\n  $span,\n  $columns,\n  $location: 1,\n  $validate: true\n) {\n  @if $validate {\n    $columns: su-valid-columns($columns);\n    $location: su-valid-location($span, $location, $columns);\n  }\n\n  $floor: floor($span);\n  $sub-columns: ();\n\n  @for $i from $location to ($location + $floor) {\n    $sub-columns: append($sub-columns, nth($columns, $i));\n  }\n\n  @if $floor != $span {\n    $remainder: $span - $floor;\n    $column: $location + $floor;\n    $sub-columns: append($sub-columns, nth($columns, $column) * $remainder);\n  }\n\n  @return $sub-columns;\n}\n\n\n\n// Su Sum\n// ------\n/// Get the total sum of column-units in a layout.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {list} $columns -\n///   List of columns in the grid\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `columns` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {number} -\n///   Total sum of column-units in a grid\n@function _su-sum(\n  $columns,\n  $gutters,\n  $spread,\n  $validate: true\n) {\n  @if $validate {\n    $columns: su-valid-span($columns);\n    $gutters: su-valid-gutters($gutters);\n    $spread: su-valid-spread($spread);\n  }\n\n  // Calculate column-sum\n  $column-sum: 0;\n  @each $column in $columns {\n    $column-sum: $column-sum + $column;\n  }\n\n  $gutter-sum: (ceil(length($columns)) + $spread) * $gutters;\n  $total: if(($gutter-sum > 0), $column-sum + $gutter-sum, $column-sum);\n\n  @return $total;\n}\n\n\n\n// Su Calc\n// -------\n/// Return a usable span width as a `calc()` function,\n/// in order to create mixed-unit grids.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {number | list} $span -\n///   Pre-sliced list of grid columns to span\n/// @param {list} $columns -\n///   List of columns available\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {0 | 1 | -1} $container-spread [$spread] -\n///   Number of gutters spanned,\n///   relative to `columns` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {length} -\n///   Relative or static length of a span on the grid\n@function _su-calc-span(\n  $span,\n  $columns,\n  $gutters,\n  $spread,\n  $container-spread: $spread,\n  $validate: true\n) {\n  @if $validate {\n    $span: su-valid-span($span);\n    $columns: su-valid-columns($columns);\n    $gutters: su-valid-gutters($gutters);\n    $spread: su-valid-spread($spread);\n    $container-spread: su-valid-spread($container-spread);\n  }\n\n  // Span and context\n  $span: _su-calc-sum($span, $gutters, $spread, not 'validate');\n  $context: _su-calc-sum($columns, $gutters, $container-spread, not 'validate');\n\n  // Fixed and fluid\n  $fixed-span: map-get($span, 'fixed');\n  $fluid-span: map-get($span, 'fluid');\n  $fixed-context: map-get($context, 'fixed');\n  $fluid-context: map-get($context, 'fluid');\n\n  $calc: '#{$fixed-span}';\n  $fluid-calc: '(100% - #{$fixed-context})';\n\n  // Fluid-values\n  @if (not $fluid-span) {\n    $fluid-calc: null;\n  } @else if ($fluid-span != $fluid-context) {\n    $fluid-span: '* #{$fluid-span}';\n    $fluid-context: if($fluid-context, '/ #{$fluid-context}', '');\n    $fluid-calc: '(#{$fluid-calc $fluid-context $fluid-span})';\n  }\n\n  @if $fluid-calc {\n    $calc: if(($calc != ''), '#{$calc} + ', '');\n    $calc: '#{$calc + $fluid-calc}';\n  }\n\n  @return calc(#{unquote($calc)});\n}\n\n\n\n// Su Calc-Sum\n// -----------\n/// Get the total sum of fixed and fluid column-units\n/// for creating a mixed-unit layout with `calc()` values.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {list} $columns -\n///   List of columns available\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {map} -\n///   Map with `fixed` and `fluid` keys\n///   containing the proper math as strings\n@function _su-calc-sum(\n  $columns,\n  $gutters,\n  $spread,\n  $validate: true\n) {\n  @if $validate {\n    $columns: su-valid-span($columns);\n    $gutters: su-valid-gutters($gutters);\n    $spread: su-valid-spread($spread);\n  }\n\n  $fluid: 0;\n  $fixed: ();\n  $calc: null;\n\n  // Gutters\n  $gutters:  $gutters * (length($columns) + $spread);\n\n  // Columns\n  @each $col in append($columns, $gutters) {\n    @if unitless($col) {\n      $fluid: $fluid + $col;\n    } @else {\n      $fixed: _su-map-add-units($fixed, $col);\n    }\n  }\n\n  // Compile Fixed Units\n  @each $unit, $total in $fixed {\n    @if ($total != (0 * $total)) {\n      $calc: if($calc, '#{$calc} + #{$total}', '#{$total}');\n    }\n  }\n\n  // Calc null or string\n  @if $calc {\n    $calc: if(str-index($calc, '+'), '(#{$calc})', '#{$calc}');\n  }\n\n  // Fluid 0 => null\n  $fluid: if(($fluid == 0), null, $fluid);\n\n\n  // Return map\n  $return: (\n    'fixed': $calc,\n    'fluid': $fluid,\n  );\n\n  @return $return;\n}\n\n\n\n// Needs Calc\n// ----------\n/// Check if `calc()` will be needed in defining a span,\n/// if the necessary units in a grid are not comparable.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {list} $span -\n///   Slice of columns to span\n/// @param {list} $columns -\n///   List of available columns in the grid\n/// @param {number} $gutters -\n///   Width of a gutter\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {bool} -\n///   `True` when units do not match, and `calc()` will be required\n@function _su-needs-calc-output(\n  $span,\n  $columns,\n  $gutters,\n  $spread,\n  $validate: true\n) {\n  @if $validate {\n    $span: su-valid-span($span);\n    $columns: su-valid-columns($columns);\n    $gutters: su-valid-gutters($gutters);\n  }\n\n  $has-gutter: if((length($span) > 1) or ($spread >= 0), true, false);\n  $check: if($has-gutter, append($span, $gutters), $span);\n  $safe-span: _su-is-comparable($check...);\n\n  @if ($safe-span == 'static') {\n    @return false;\n  } @else if (not $safe-span) {\n    @return true;\n  }\n\n  $safe-fluid: _su-is-comparable($gutters, $columns...);\n\n  @return not $safe-fluid;\n}\n","\n.list {\n  display: inline-block;\n  padding: $spacer-md;\n\n  &, &.style--default {\n    background-color: color(white);\n  }\n\n  &__title {\n    @include font(avenir, black);\n    @include font-size(18px);\n  }\n\n  &__items {\n    list-style: none;\n    padding-left: 0;\n  }\n\n  &__item {\n    margin-bottom: 15px;\n\n    a {\n      @include font(avenir, bold);\n      @include font-size(16px);\n    }\n  }\n}\n",".hero {\n  background-position: 50% 50%;\n  background-repeat: no-repeat;\n  background-size: cover;\n  height: 380px;\n  max-width: 100%;\n  min-height: 280px;\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n\n  @include mq(sm) {\n    height: 450px;\n  }\n\n  @include mq(md) {\n    height: 500px;\n  }\n\n  @include mq(lg) {\n    height: 650px;\n  }\n\n  .hero__container {\n    align-items: center;\n    display: flex;\n    height: 100%;\n    justify-content: flex-start;\n    position: absolute;\n    width: 100%;\n  }\n\n  .hero__content {\n    margin: 0;\n    overflow: hidden;\n    padding: 0 span(2);\n    z-index: 1;\n\n    @include mq(sm) {\n      padding: 0 span(1);\n    }\n\n    @include mq(md) {\n      padding: 0 span(4) 0 span(1);\n    }\n\n    h1 {\n      margin: 0;\n    }\n  }\n}\n\n// Video hero\n// When a video is present in a hero it auto plays like a background image.\n//------------------------------------------------------------------------------\n\n.hero-has-video {\n  .hero__video  {\n    bottom: 0;\n    height: 100%;\n    left: 0;\n    pointer-events: none;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 100%;\n    z-index: 0;\n  }\n\n  .hero__video {\n    @include mq($until: md) {\n      display: none;\n    }\n\n    iframe {\n      height: 100%;\n      left: 0;\n      position: absolute;\n      top: 0;\n      width: 100%;\n    }\n  }\n}\n\n\n// Default\n// Right-aligned contents, constrained to ~50% width, using the default grid\n// definition.\n//------------------------------------------------------------------------------\n\n.hero-style-default {\n  .hero__content {\n    @include mq(sm) {\n      padding-left: span(1);\n      padding-right: span(4 wide);\n    }\n  }\n}\n\n// Right\n// Right-aligned contents, constrained to ~50% width, using the default grid\n// definition.\n//------------------------------------------------------------------------------\n\n.hero-style-right {\n  .hero__container {\n    @include mq(sm) {\n      align-content: flex-end;\n      justify-content: flex-end;\n    }\n  }\n\n  .hero__content {\n    @include mq(sm) {\n      padding-left: span(5 wide);\n      padding-right: span(1);\n    }\n  }\n}\n\n\n// Left\n// Left-aligned contents, constrained to ~50% width, using the default grid\n// definition.\n//------------------------------------------------------------------------------\n\n.hero-style-left {\n  .hero__container {\n    @include mq(sm) {\n      align-content: flex-start;\n      justify-content: flex-start;\n    }\n  }\n\n  .hero__content {\n    @include mq(sm) {\n      padding-left: span(1);\n      padding-right: span(5 wide);\n    }\n  }\n}\n\n\n// Article\n// @todo This needs to be styled:\n// https://chapterthree.teamworkpm.net/#tasks/7437691\n//------------------------------------------------------------------------------\n\n.hero-style-article {\n  max-height: 350px;\n\n  .hero__content {\n    padding: 0 calc(30px + ((100% - 330px) / 12 * 1));\n    @include mq($from: md) {\n      margin-left: 15%;\n      padding: 0;\n      width: 85%;\n    }\n  }\n}\n\n\n// Short\n// @todo This needs to be styled:\n// https://chapterthree.teamworkpm.net/#tasks/7437692\n//------------------------------------------------------------------------------\n\n.hero-style-short {\n  max-height: 290px;\n}\n","// Default\n// Right-aligned contents, constrained to ~50% width, using the default grid\n// definition.\n//------------------------------------------------------------------------------\n\n.feature {\n  background-position: 50% 50%;\n  background-repeat: no-repeat;\n  background-size: cover;\n  height: 380px;\n  max-width: 100%;\n  min-height: 280px;\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n\n  @include mq(sm) {\n    height: 450px;\n  }\n\n  @include mq(md) {\n    height: 500px;\n  }\n\n  @include mq(lg) {\n    height: 650px;\n  }\n\n  .feature__container {\n    align-items: center;\n    display: flex;\n    height: 100%;\n    justify-content: flex-start;\n    position: absolute;\n    width: 100%;\n  }\n\n  .feature__content {\n    margin: 0;\n    overflow: hidden;\n    padding: 0 span(2);\n    z-index: 1;\n\n    @include mq(sm) {\n      padding: 0 span(1) 0 span(4 wide);\n    }\n\n    @include mq(md) {\n      padding: 0 span(4) 0 span(1);\n    }\n  }\n}\n\n\n// Right\n//\n// Right-aligned contents, constrained to ~50% width, using the default\n// grid definition.\n//------------------------------------------------------------------------------\n\n.feature--right {\n  .feature__container {\n    @include mq(sm) {\n      align-content: flex-end;\n      justify-content: flex-end;\n    }\n  }\n\n  .feature__content {\n    @include mq(sm) {\n      padding-left: span(5 wide);\n      padding-right: span(1);\n    }\n  }\n}\n\n\n// Left\n//\n// Left-aligned contents, constrained to ~50% width, using the default grid\n// definition.\n//------------------------------------------------------------------------------\n\n.feature---left {\n  .feature__container {\n    @include mq(sm) {\n      align-content: flex-start;\n      justify-content: flex-start;\n    }\n  }\n\n  .feature__content {\n    @include mq(sm) {\n      padding-left: span(1);\n      padding-right: span(5 wide);\n    }\n  }\n}\n\n",".stats {\n  height: 100%;\n}\n","// Styles\n//\n// Styles are applied via the `field_style` field, to a variety of different\n// entities within Drupal. The available options are managed in the `base_utils`\n// module, specifically the `base_utils_style_options()` function. These options\n// are exposed to editors on certain entities such as hero, tout, image, etc.\n//\n// .style--default - Transparent background, inherits body text color/accents.\n// .style--black - Black background, white text.\n// .style--blue - Blue background, white text.\n// .style--blue-light - Light blue background, white text.\n// .style--gray-light - Light gray background, body text.\n// .style--green - Green background, white text.\n// .style--orange - Orange background, white text.\n// .style--purple - Purple background, white text.\n// .style--red - Red background, white text.\n// .style--yellow - Yellow background, white text.\n// .style--white - White background, black text.\n//\n//------------------------------------------------------------------------------\n\n.style--default {\n  background-color: $color-background;\n  color: $color-foreground;\n\n  a:not([class*='button']) {\n    color: color(link-blue);\n  }\n}\n\n.style--transparent {\n  background-color: transparent;\n  color: $color-foreground;\n\n  a:not([class*='button'])  {\n    color: color(link-blue);\n  }\n}\n\n.style--black {\n  background-color: #000;\n\n  &, a:not([class*='button']) {\n    color: color(white);\n  }\n}\n\n.style--blue {\n  background-color: color(blue);\n\n  &, a:not([class*='button']) {\n    color: color(white);\n  }\n}\n\n.style--blue-light {\n  background-color: color(sky-blue);\n\n  &, a:not([class*='button']) {\n    color: color(white);\n  }\n}\n\n.style--gray {\n  background-color: color(medium-gray);\n\n  &, a:not([class*='button']) {\n    color: color(white);\n  }\n}\n\n.style--gray-light {\n  background-color: color(light-gray);\n\n  &, a:not([class*='button']) {\n    color: color(black);\n  }\n}\n\n.style--green {\n  background-color: color(green);\n\n  &, a:not([class*='button']) {\n    color: color(white);\n  }\n}\n\n.style--orange {\n  background-color: color(orange);\n\n  &, a:not([class*='button']) {\n    color: color(white);\n  }\n}\n\n.style--purple {\n  background-color: color(indigo);\n\n  &, a:not([class*='button']) {\n    color: color(white);\n  }\n}\n\n.style--red {\n  background-color: color(red);\n\n  &, a:not([class*='button']) {\n    color: color(white);\n  }\n}\n\n.style--yellow {\n  background-color: color(yellow);\n\n  &, a:not([class*='button']) {\n    color: color(black);\n  }\n}\n\n.style--white {\n  background-color: color(white);\n\n  &, a:not([class*='button']) {\n    color: $color-foreground;\n  }\n}\n"]}