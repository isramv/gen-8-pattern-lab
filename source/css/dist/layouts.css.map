{"version":3,"sources":["../../_patterns/00-base/_mixins.scss","../../_patterns/04-layouts/_base.scss","layouts.css","../../_patterns/00-base/03-grid/_variables.scss","../../../node_modules/sass-mq/_mq.scss","../../_patterns/04-layouts/00-two/_two.scss","../../../node_modules/susy/sass/susy/_su-math.scss","../../_patterns/04-layouts/00-two/_two-fixed.scss","../../_patterns/04-layouts/00-two/_two-25-75.scss","../../_patterns/04-layouts/00-two/_two-75-25.scss","../../_patterns/04-layouts/00-two/_two-60-40.scss","../../_patterns/04-layouts/00-two/_two-40-60.scss","../../_patterns/04-layouts/01-three/_three.scss","../../_patterns/04-layouts/01-three/_three-two.scss","../../_patterns/04-layouts/02-four/_four.scss","../../_patterns/04-layouts/03-auto/_auto.scss"],"names":[],"mappings":"AAIE;EAEE,YAAW;EACX,eAAc;CACf;;AACD;EACE,YAAW;CACZ;;ACPH;EACE,eAAc;CACf;;ACOD;EDEI,iBEXY;EFYZ,iBETsB;CFUvB;;AGgNK;EHxMqB;ICLzB;MDME,2BAAoB;UAApB,wBAAoB;cAApB,qBAAoB;MACpB,qBAAa;MAAb,qBAAa;MAAb,cAAa;MACb,+BAAmB;MAAnB,8BAAmB;UAAnB,wBAAmB;cAAnB,oBAAmB;KAexB;GClBE;EDK0B;ICHzB;MDIE,cAAa;MACb,mCAAkD;MAClD,YE7BU;KFuCf;ICXG;MDKI,iBAAgB;MAEhB,iBAAgB;KACjB;GCJJ;CACF;;AAED;EDQE,iBAAgB;CACjB;;AAI0B;ECRzB;IDSE,sBAAqB;IACrB,cAAa;GAEhB;CCRA;;AEiLO;EF9KN;IG3CI,WCoF0C;GDnF3C;EH6CH;IG1CI,YAAW;IACX,YAAW;IACX,gBAVY;GAWb;EH4CH;IGzCI,aAAY;IACZ,gBAAe;GAChB;EAEwB;IH0CzB;MGzCE,sCAAqC;KAQxC;IHoCC;MGzCI,2BAA0B;MAC1B,gBAAe;MACf,YAAW;KACZ;GH2CJ;CACF;;AAED;EKnEI,WDoF4C;CCnF7C;;ALsEH;EKnEI,YAAW;EACX,YAAW;EACX,gBAVY;CAWb;;ALsEH;EKnEI,aAAY;EACZ,gBAAe;CAChB;;AAOwB;ELgEzB;IK/DE,2BAAoB;QAApB,wBAAoB;YAApB,qBAAoB;IACpB,qBAAa;IAAb,qBAAa;IAAb,cAAa;IACb,+BAAmB;IAAnB,8BAAmB;QAAnB,wBAAmB;YAAnB,oBAAmB;GAgBtB;CLkDA;;AK/D0B;ELkEzB;IKjEE,cAAa;IACb,mCAAkD;IAClD,YJhCY;IIiCZ,sCAAqC;GASxC;EL2DC;IKjEI,2BAA0B;IAC1B,gBAAe;IACf,iBAAgB;IAChB,YAAW;GACZ;CLmEJ;;AEkHO;EF/GN;IM1GI,YAAW;IACX,YAAW;IACX,gBANY;IAOZ,WFiF0C;GEhF3C;EN4GH;IMzGI,aAAY;IACZ,gBAAe;IACf,WF2E0C;GE1E3C;EAEwB;IN0GzB;MMzGE,sCAAqC;KAiBxC;IN2FC;MMzGI,2BAA0B;KAC3B;IN2GH;MMxGI,2BAA0B;KAC3B;IN0GH;;MMrGI,gBAAe;MACf,YAAW;KACZ;GNwGJ;CACF;;AEoFO;EFjFN;IOxII,YAAW;IACX,YAAW;IACX,gBANY;IAOZ,WHiF0C;GGhF3C;EP0IH;IOvII,aAAY;IACZ,gBAAe;IACf,WH2E0C;GG1E3C;EAEwB;IPwIzB;MOvIE,sCAAqC;KAiBxC;IPyHC;MOvII,2BAA0B;KAC3B;IPyIH;MOtII,2BAA0B;KAC3B;IPwIH;;MOnII,gBAAe;MACf,YAAW;KACZ;GPsIJ;CACF;;AEsDO;EFnDN;IQtKI,YAAW;IACX,YAAW;IACX,gBANY;IAOZ,WJiF0C;GIhF3C;ERwKH;IQrKI,aAAY;IACZ,gBAAe;IACf,WJ2E0C;GI1E3C;EAEwB;IRsKzB;MQrKE,sCAAqC;KAiBxC;IRuJC;MQrKI,2BAA0B;KAC3B;IRuKH;MQpKI,2BAA0B;KAC3B;IRsKH;;MQjKI,gBAAe;MACf,YAAW;KACZ;GRoKJ;CACF;;AEwBO;EFrBN;ISpMI,YAAW;IACX,YAAW;IACX,gBANY;IAOZ,WLiF0C;GKhF3C;ETsMH;ISnMI,aAAY;IACZ,gBAAe;IACf,WL2E0C;GK1E3C;EAEwB;IToMzB;MSnME,sCAAqC;KAiBxC;ITqLC;MSnMI,2BAA0B;KAC3B;ITqMH;MSlMI,2BAA0B;KAC3B;IToMH;;MS/LI,gBAAe;MACf,YAAW;KACZ;GTkMJ;CACF;;AENO;EFSN;IUlOI,iBNoF0C;GMnF3C;EVoOH;;IUhOI,YAAW;IACX,YAAW;IACX,gBAXY;GAYb;EVmOH;IUhOI,aAAY;IACZ,gBAAe;GAChB;EAEwB;IViOzB;MUhOE,sCAAqC;KAQxC;IV2NC;MUhOI,2BAA0B;MAC1B,gBAAe;MACf,YAAW;KACZ;GVkOJ;CACF;;AAED;EW5PI,WPqF4C;COpF7C;;AX+PH;EW5PI,YAAW;EACX,YAAW;EACX,gBAVY;CAWb;;AX+PH;EW5PI,aAAY;EACZ,gBAAe;CAChB;;AAQwB;EXwPzB;IWvPE,2BAAoB;QAApB,wBAAoB;YAApB,qBAAoB;IACpB,qBAAa;IAAb,qBAAa;IAAb,cAAa;IACb,+BAAmB;IAAnB,8BAAmB;QAAnB,wBAAmB;YAAnB,oBAAmB;GAiDtB;CXyMA;;AWtP0B;EXyPzB;IWxPE,cAAa;IACb,mCAAkD;IAClD,YVjCY;IUkCZ,sCAAqC;GAyCxC;EXkNC;IWxPI,2BAA0B;IAC1B,gBAAe;IACf,YAAW;GACZ;CX0PJ;;AErEO;EFwEN;IWnPI,iBPsC0C;GOrC3C;EXqPH;;IWjPI,YAAW;IACX,YAAW;IACX,gBAXY;GAYb;EXoPH;IWjPI,aAAY;IACZ,gBAAe;GAChB;EAEwB;IXkPzB;MWjPE,sCAAqC;KAS1C;IX2OG;MWjPI,2BAA0B;MAC1B,gBAAe;MACf,YAAW;KACZ;GXmPJ;CACF;;AAED;EY1SI,WRoE4C;CQnE7C;;AZ6SH;;;EYzSI,YAAW;EACX,YAAW;EACX,gBAVY;CAWb;;AZ8SH;EY5SI,YAAW;EACX,gBAAe;CAChB;;AAGsB;EZ6SvB;IY3SE,sCAAqC;GAMtC;EZwSD;IY5SI,2BAA0B;IAC1B,gBAAe;IACf,YAAW;GACZ;CZ8SJ;;AE3HO;EF8HN;Ia5VI,YAAW;GACZ;Eb8VH;IapVQ,gBAJY;IAKZ,YT6EsC;GS5EvC;EbsVP;IaxVQ,gBAJY;IAKZ,WT6EsC;GS5EvC;Eb0VP;Ia5VQ,gBAJY;IAKZ,iBT6EsC;GS5EvC;Eb8VP;IahWQ,gBAJY;IAKZ,WT6EsC;GS5EvC;EbkWP;IapWQ,gBAJY;IAKZ,WT6EsC;GS5EvC;EbsWP;IaxWQ,gBAJY;IAKZ,iBT6EsC;GS5EvC;Eb0WP;Ia5WQ,gBAJY;IAKZ,iBT6EsC;GS5EvC;Eb8WP;IahXQ,gBAJY;IAKZ,aT6EsC;GS5EvC;EbkXP;IapXQ,gBAJY;IAKZ,iBT6EsC;GS5EvC;EbsXP;IaxXQ,gBAJY;IAKZ,WT6EsC;GS5EvC;Eb0XP;Ia5XQ,gBAJY;IAKZ,gBT6EsC;GS5EvC;Eb8XP;IahYQ,gBAJY;IAKZ,gBT6EsC;GS5EvC;EbkYP;Ia7XI,gBAAe;GAChB;EAEwB;Ib8XzB;Ma3XM,sCAA4C;KAC7C;Ib6XL;Ma9XM,sCAA4C;KAC7C;IbgYL;MajYM,sCAA4C;KAC7C;IbmYL;MapYM,sCAA4C;KAC7C;IbsYL;MavYM,sCAA4C;KAC7C;IbyYL;Ma1YM,sCAA4C;KAC7C;Ib4YL;Ma7YM,sCAA4C;KAC7C;Ib+YL;MahZM,sCAA4C;KAC7C;IbkZL;ManZM,sCAA4C;KAC7C;IbqZL;MatZM,uCAA4C;KAC7C;IbwZL;MazZM,uCAA4C;KAC7C;Ib2ZL;Ma5ZM,uCAA4C;KAC7C;Ib8ZL;MaxZM,gBAAe;MACf,iBAAgB;MAChB,YAAW;KACZ;Gb0ZN;CACF","file":"layouts.css","sourcesContent":["// Clearfix\n//------------------------------------------------------------------------------\n\n@mixin clearfix {\n  &::after,\n  &::before {\n    content: '';\n    display: table;\n  }\n  &::after {\n    clear: both;\n  }\n}\n\n// Font Size\n//------------------------------------------------------------------------------\n// @example\n//   @include font-size(12px);\n//   @include font-size(12px, 'lg');\n//------------------------------------------------------------------------------\n\n@mixin font-size($size: $base-font-size, $breakpoint: null) {\n  @if ($breakpoint != null) {\n    @include mq($breakpoint) {\n      font-size: $size / 16px * 1rem;\n    }\n  } @else {\n    font-size: $size / 16px * 1rem;\n  }\n}\n\n// Font\n//------------------------------------------------------------------------------\n// @example\n//   @include font('avenir', 'light');\n//   @include font('handwriting', 'regular', 'family');\n//------------------------------------------------------------------------------\n\n@mixin font($group, $variant: regular, $properties: family weight style, $font-stack: $base-font-stack) {\n  $font-properties: map-deep-get($font-stack, $group, $variant);\n  @if $font-properties {\n    @each $property, $values in $font-properties {\n      @if contains($properties, $property) {\n        @if $property == 'family' {\n          font-#{$property}: unquote(map-get($font-properties, $property));\n        }\n        @else {\n          font-#{$property}: map-get($font-properties, $property);\n        }\n      }\n    }\n  }\n}\n\n// Visually Hidden\n//\n// Hides elements visually, but keep them available for screen readers. For\n// elements that need to be focusable (e.g. a, button, input, select, textarea)\n// use `true` parameter to maintain focusability.\n//\n// Note: This is also avaialble as a helper class, `.visually-hidden` or\n// `visually-hidden-focusable`.\n//\n// @param {bool} $focusable - Whether the target selector is focusable.\n//\n// @example\n//    div {\n//      @include visually-hidden;\n//    }\n//    a {\n//      @include visually-hidden(true);\n//    }\n//------------------------------------------------------------------------------\n\n@mixin visually-hidden($focusable: false) {\n  & {\n    clip: rect(1px, 1px, 1px, 1px);\n    height: 1px;\n    overflow: hidden;\n    position: absolute !important;\n    width: 1px;\n    word-wrap: normal;\n    @if ($focusable) {\n      &:active,\n      &:focus {\n        clip: auto;\n        height: auto;\n        overflow: visible;\n        position: static !important;\n        width: auto;\n      }\n    }\n  }\n}\n","\n.layout__wrapper {\n  @include clearfix;\n}\n.layout__container {\n  margin: 0 auto;\n}\n\n\n// Base Grid\n// This is the base class for the grid styles. It is 100% of the single column\n// grid CSS, and the base for the others.\n\n[data-layout] {\n  > * {\n    margin-bottom: $grid-row-gap;\n    min-height: $grid-row-min-height;\n  }\n  // This doesn't apply to IE11. IE11 does not support @supports, so this code\n  // is ignored, despite Flexbox being partially supported. There are a ton of\n  // bugs, and this code is enhancement-only (equal height columns), so not\n  // worth the trouble there. Reference:\n  // http://caniuse.com/#feat=css-supports-api\n  // http://caniuse.com/#feat=flexbox\n  @include mq(sm) {\n    @supports (display: flex) {\n      align-items: stretch;\n      display: flex;\n      flex-flow: row wrap;\n    }\n    @supports (display: grid) {\n      display: grid;\n      grid-auto-rows: minmax($grid-row-min-height, auto);\n      grid-gap: $grid-row-gap;\n      > * {\n        // Override the margin applied above to act as gutters where grid isn't\n        // supported.\n        margin-bottom: 0;\n        // This prevents iframes from expanding the width of the columns.\n        overflow: hidden;\n      }\n    }\n  }\n}\n\n// Single column layouts (default) shouldn't have an display applied.\n[data-layout='layout__default'] {\n  display: initial;\n}\n\n// Detect when grid items need padding and apply\n[data-layout-padding='layout-padding__20'] {\n  @supports (display: grid) {\n    grid-column-gap: 20px;\n    padding: 20px;\n  }\n}\n",".layout__wrapper::after, .layout__wrapper::before {\n  content: '';\n  display: table;\n}\n\n.layout__wrapper::after {\n  clear: both;\n}\n\n.layout__container {\n  margin: 0 auto;\n}\n\n[data-layout] > * {\n  margin-bottom: 0;\n  min-height: 50px;\n}\n\n@media (min-width: 48em) {\n  @supports (display: flex) {\n    [data-layout] {\n      align-items: stretch;\n      display: flex;\n      flex-flow: row wrap;\n    }\n  }\n  @supports (display: grid) {\n    [data-layout] {\n      display: grid;\n      grid-auto-rows: minmax(50px, auto);\n      grid-gap: 0;\n    }\n    [data-layout] > * {\n      margin-bottom: 0;\n      overflow: hidden;\n    }\n  }\n}\n\n[data-layout='layout__default'] {\n  display: initial;\n}\n\n@supports (display: grid) {\n  [data-layout-padding='layout-padding__20'] {\n    grid-column-gap: 20px;\n    padding: 20px;\n  }\n}\n\n@media (min-width: 48em) {\n  [data-layout='layout__2'] > * {\n    width: 50%;\n  }\n  [data-layout='layout__2'] > *:nth-child(odd) {\n    clear: both;\n    float: left;\n    margin-right: 0;\n  }\n  [data-layout='layout__2'] > *:nth-child(even) {\n    float: right;\n    margin-right: 0;\n  }\n  @supports (display: grid) {\n    [data-layout='layout__2'] {\n      grid-template-columns: repeat(2, 1fr);\n    }\n    [data-layout='layout__2'] > * {\n      grid-column: auto / span 1;\n      margin-right: 0;\n      width: auto;\n    }\n  }\n}\n\n[data-layout='layout__2_fixed'] > * {\n  width: 50%;\n}\n\n[data-layout='layout__2_fixed'] > *:nth-child(odd) {\n  clear: both;\n  float: left;\n  margin-right: 0;\n}\n\n[data-layout='layout__2_fixed'] > *:nth-child(even) {\n  float: right;\n  margin-right: 0;\n}\n\n@supports (display: flex) {\n  [data-layout='layout__2_fixed'] {\n    align-items: stretch;\n    display: flex;\n    flex-flow: row wrap;\n  }\n}\n\n@supports (display: grid) {\n  [data-layout='layout__2_fixed'] {\n    display: grid;\n    grid-auto-rows: minmax(50px, auto);\n    grid-gap: 0;\n    grid-template-columns: repeat(2, 1fr);\n  }\n  [data-layout='layout__2_fixed'] > * {\n    grid-column: auto / span 1;\n    margin-right: 0;\n    overflow: hidden;\n    width: auto;\n  }\n}\n\n@media (min-width: 48em) {\n  [data-layout='layout__2_25_75'] > *:nth-child(odd) {\n    clear: both;\n    float: left;\n    margin-right: 0;\n    width: 25%;\n  }\n  [data-layout='layout__2_25_75'] > *:nth-child(even) {\n    float: right;\n    margin-right: 0;\n    width: 75%;\n  }\n  @supports (display: grid) {\n    [data-layout='layout__2_25_75'] {\n      grid-template-columns: repeat(4, 1fr);\n    }\n    [data-layout='layout__2_25_75'] > *:nth-child(odd) {\n      grid-column: auto / span 1;\n    }\n    [data-layout='layout__2_25_75'] > *:nth-child(even) {\n      grid-column: auto / span 3;\n    }\n    [data-layout='layout__2_25_75'] > *:nth-child(odd),\n    [data-layout='layout__2_25_75'] > *:nth-child(even) {\n      margin-right: 0;\n      width: auto;\n    }\n  }\n}\n\n@media (min-width: 48em) {\n  [data-layout='layout__2_75_25'] > *:nth-child(odd) {\n    clear: both;\n    float: left;\n    margin-right: 0;\n    width: 75%;\n  }\n  [data-layout='layout__2_75_25'] > *:nth-child(even) {\n    float: right;\n    margin-right: 0;\n    width: 25%;\n  }\n  @supports (display: grid) {\n    [data-layout='layout__2_75_25'] {\n      grid-template-columns: repeat(4, 1fr);\n    }\n    [data-layout='layout__2_75_25'] > *:nth-child(odd) {\n      grid-column: auto / span 3;\n    }\n    [data-layout='layout__2_75_25'] > *:nth-child(even) {\n      grid-column: auto / span 1;\n    }\n    [data-layout='layout__2_75_25'] > *:nth-child(odd),\n    [data-layout='layout__2_75_25'] > *:nth-child(even) {\n      margin-right: 0;\n      width: auto;\n    }\n  }\n}\n\n@media (min-width: 48em) {\n  [data-layout='layout__2_60_40'] > *:nth-child(odd) {\n    clear: both;\n    float: left;\n    margin-right: 0;\n    width: 60%;\n  }\n  [data-layout='layout__2_60_40'] > *:nth-child(even) {\n    float: right;\n    margin-right: 0;\n    width: 40%;\n  }\n  @supports (display: grid) {\n    [data-layout='layout__2_60_40'] {\n      grid-template-columns: repeat(5, 1fr);\n    }\n    [data-layout='layout__2_60_40'] > *:nth-child(odd) {\n      grid-column: auto / span 3;\n    }\n    [data-layout='layout__2_60_40'] > *:nth-child(even) {\n      grid-column: auto / span 2;\n    }\n    [data-layout='layout__2_60_40'] > *:nth-child(odd),\n    [data-layout='layout__2_60_40'] > *:nth-child(even) {\n      margin-right: 0;\n      width: auto;\n    }\n  }\n}\n\n@media (min-width: 48em) {\n  [data-layout='layout__2_40_60'] > *:nth-child(odd) {\n    clear: both;\n    float: left;\n    margin-right: 0;\n    width: 40%;\n  }\n  [data-layout='layout__2_40_60'] > *:nth-child(even) {\n    float: right;\n    margin-right: 0;\n    width: 60%;\n  }\n  @supports (display: grid) {\n    [data-layout='layout__2_40_60'] {\n      grid-template-columns: repeat(5, 1fr);\n    }\n    [data-layout='layout__2_40_60'] > *:nth-child(odd) {\n      grid-column: auto / span 2;\n    }\n    [data-layout='layout__2_40_60'] > *:nth-child(even) {\n      grid-column: auto / span 3;\n    }\n    [data-layout='layout__2_40_60'] > *:nth-child(odd),\n    [data-layout='layout__2_40_60'] > *:nth-child(even) {\n      margin-right: 0;\n      width: auto;\n    }\n  }\n}\n\n@media (min-width: 48em) {\n  [data-layout='layout__3'] > * {\n    width: 33.33333%;\n  }\n  [data-layout='layout__3'] > *:nth-child(3n + 1),\n  [data-layout='layout__3'] > *:nth-child(3n + 2) {\n    clear: both;\n    float: left;\n    margin-right: 0;\n  }\n  [data-layout='layout__3'] > *:nth-child(3n + 3) {\n    float: right;\n    margin-right: 0;\n  }\n  @supports (display: grid) {\n    [data-layout='layout__3'] {\n      grid-template-columns: repeat(3, 1fr);\n    }\n    [data-layout='layout__3'] > * {\n      grid-column: auto / span 1;\n      margin-right: 0;\n      width: auto;\n    }\n  }\n}\n\n[data-layout='layout__3_2'] > * {\n  width: 50%;\n}\n\n[data-layout='layout__3_2'] > *:nth-child(3n + 1) {\n  clear: both;\n  float: left;\n  margin-right: 0;\n}\n\n[data-layout='layout__3_2'] > *:nth-child(3n + 2) {\n  float: right;\n  margin-right: 0;\n}\n\n@supports (display: flex) {\n  [data-layout='layout__3_2'] {\n    align-items: stretch;\n    display: flex;\n    flex-flow: row wrap;\n  }\n}\n\n@supports (display: grid) {\n  [data-layout='layout__3_2'] {\n    display: grid;\n    grid-auto-rows: minmax(50px, auto);\n    grid-gap: 0;\n    grid-template-columns: repeat(2, 1fr);\n  }\n  [data-layout='layout__3_2'] > * {\n    grid-column: auto / span 1;\n    margin-right: 0;\n    width: auto;\n  }\n}\n\n@media (min-width: 48em) {\n  [data-layout='layout__3_2'] > * {\n    width: 33.33333%;\n  }\n  [data-layout='layout__3_2'] > *:nth-child(3n + 1),\n  [data-layout='layout__3_2'] > *:nth-child(3n + 2) {\n    clear: both;\n    float: left;\n    margin-right: 0;\n  }\n  [data-layout='layout__3_2'] > *:nth-child(3n + 3) {\n    float: right;\n    margin-right: 0;\n  }\n  @supports (display: grid) {\n    [data-layout='layout__3_2'] {\n      grid-template-columns: repeat(3, 1fr);\n    }\n    [data-layout='layout__3_2'] > * {\n      grid-column: auto / span 1;\n      margin-right: 0;\n      width: auto;\n    }\n  }\n}\n\n[data-layout='layout__4'] > * {\n  width: 25%;\n}\n\n[data-layout='layout__4'] > *:nth-child(4n + 1),\n[data-layout='layout__4'] > *:nth-child(4n + 2),\n[data-layout='layout__4'] > *:nth-child(4n + 3) {\n  clear: both;\n  float: left;\n  margin-right: 0;\n}\n\n[data-layout='layout__4'] > *:nth-child(4n + 4) {\n  float: left;\n  margin-right: 0;\n}\n\n@supports (display: grid) {\n  [data-layout='layout__4'] {\n    grid-template-columns: repeat(4, 1fr);\n  }\n  [data-layout='layout__4'] > * {\n    grid-column: auto / span 1;\n    margin-right: 0;\n    width: 100%;\n  }\n}\n\n@media (min-width: 48em) {\n  [data-layout='layout__auto'] > * {\n    float: left;\n  }\n  [data-layout='layout__auto'][data-items='1'] > * {\n    margin-right: 0;\n    width: 100%;\n  }\n  [data-layout='layout__auto'][data-items='2'] > * {\n    margin-right: 0;\n    width: 50%;\n  }\n  [data-layout='layout__auto'][data-items='3'] > * {\n    margin-right: 0;\n    width: 33.33333%;\n  }\n  [data-layout='layout__auto'][data-items='4'] > * {\n    margin-right: 0;\n    width: 25%;\n  }\n  [data-layout='layout__auto'][data-items='5'] > * {\n    margin-right: 0;\n    width: 20%;\n  }\n  [data-layout='layout__auto'][data-items='6'] > * {\n    margin-right: 0;\n    width: 16.66667%;\n  }\n  [data-layout='layout__auto'][data-items='7'] > * {\n    margin-right: 0;\n    width: 14.28571%;\n  }\n  [data-layout='layout__auto'][data-items='8'] > * {\n    margin-right: 0;\n    width: 12.5%;\n  }\n  [data-layout='layout__auto'][data-items='9'] > * {\n    margin-right: 0;\n    width: 11.11111%;\n  }\n  [data-layout='layout__auto'][data-items='10'] > * {\n    margin-right: 0;\n    width: 10%;\n  }\n  [data-layout='layout__auto'][data-items='11'] > * {\n    margin-right: 0;\n    width: 9.09091%;\n  }\n  [data-layout='layout__auto'][data-items='12'] > * {\n    margin-right: 0;\n    width: 8.33333%;\n  }\n  [data-layout='layout__auto'] > *:last-child {\n    margin-right: 0;\n  }\n  @supports (display: grid) {\n    [data-layout='layout__auto'][data-items='1'] {\n      grid-template-columns: repeat(1, 1fr);\n    }\n    [data-layout='layout__auto'][data-items='2'] {\n      grid-template-columns: repeat(2, 1fr);\n    }\n    [data-layout='layout__auto'][data-items='3'] {\n      grid-template-columns: repeat(3, 1fr);\n    }\n    [data-layout='layout__auto'][data-items='4'] {\n      grid-template-columns: repeat(4, 1fr);\n    }\n    [data-layout='layout__auto'][data-items='5'] {\n      grid-template-columns: repeat(5, 1fr);\n    }\n    [data-layout='layout__auto'][data-items='6'] {\n      grid-template-columns: repeat(6, 1fr);\n    }\n    [data-layout='layout__auto'][data-items='7'] {\n      grid-template-columns: repeat(7, 1fr);\n    }\n    [data-layout='layout__auto'][data-items='8'] {\n      grid-template-columns: repeat(8, 1fr);\n    }\n    [data-layout='layout__auto'][data-items='9'] {\n      grid-template-columns: repeat(9, 1fr);\n    }\n    [data-layout='layout__auto'][data-items='10'] {\n      grid-template-columns: repeat(10, 1fr);\n    }\n    [data-layout='layout__auto'][data-items='11'] {\n      grid-template-columns: repeat(11, 1fr);\n    }\n    [data-layout='layout__auto'][data-items='12'] {\n      grid-template-columns: repeat(12, 1fr);\n    }\n    [data-layout='layout__auto'][data-items] > * {\n      margin-right: 0;\n      min-height: auto;\n      width: auto;\n    }\n  }\n}\n","\n$grid-columns: 12;\n$grid-container: 100%;\n$grid-column-gap: 30px;\n$grid-row-gap: 0;\n$grid-gutter: $grid-row-gap $grid-column-gap;\n$grid-gutter-susy: 30px;\n$grid-row-min-height: 50px;\n\n","@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (e.g. layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width, e.g. (mobile, tablet, desktop).\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (e.g. `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @param {Number} $base-font-size ($mq-base-font-size) - `<body>` font size\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $until (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $and (false) - Additional media query parameters\n/// @param {String} $media-type ($mq-media-type) - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints ($mq-breakpoints)\n/// @ignore @param {String} $static-breakpoint ($mq-static-breakpoint)\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _mq-quick-sort($list) {\n    $less:  ();\n    $equal: ();\n    $large: ();\n\n    @if length($list) > 1 {\n        $seed: nth($list, ceil(length($list) / 2));\n\n        @each $item in $list {\n            @if ($item == $seed) {\n                $equal: append($equal, $item);\n            } @else if ($item < $seed) {\n                $less: append($less, $item);\n            } @else if ($item > $seed) {\n                $large: append($large, $item);\n            }\n        }\n\n        @return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));\n    }\n\n    @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _mq-map-sort-by-value($map) {\n    $map-sorted: ();\n    $map-keys: map-keys($map);\n    $map-values: map-values($map);\n    $map-values-sorted: _mq-quick-sort($map-values);\n\n    // Reorder key/value pairs based on key values\n    @each $value in $map-values-sorted {\n        $index: index($map-values, $value);\n        $key: nth($map-keys, $index);\n        $map-sorted: map-merge($map-sorted, ($key: $value));\n\n        // Unset the value in $map-values to prevent the loop\n        // from finding the same index twice\n        $map-values: set-nth($map-values, $index, 0);\n    }\n\n    @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints ($mq-show-breakpoints) - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints ($mq-breakpoints) - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n","@include mq(sm) {\n  [data-layout='layout__2'] {\n    $layout: (\n      'columns': susy-repeat(2),\n      'gutters': 0,\n    );\n\n    > * {\n      width: span(1, $layout);\n    }\n\n    > *:nth-child(odd) {\n      clear: both; // IE 11.\n      float: left;\n      margin-right: gutter($layout); // sass-lint:disable-line empty-args\n    }\n\n    > *:nth-child(even) {\n      float: right;\n      margin-right: 0;\n    }\n\n    @supports (display: grid) {\n      grid-template-columns: repeat(2, 1fr);\n\n      > * {\n        grid-column: auto / span 1;\n        margin-right: 0;\n        width: auto;\n      }\n    }\n  }\n}\n","/// Grid Math Engine\n/// ================\n/// The `su` functions give you direct access to the math layer,\n/// without any syntax-sugar like shorthand parsing, and normalization.\n/// If you prefer named arguments, and stripped-down syntax,\n/// you can use these functions directly in your code –\n/// replacing `span`, `gutter`, and `slice`.\n///\n/// These functions are also useful\n/// for building mixins or other extensions to Susy.\n/// Apply the Susy syntax to new mixins and functions,\n/// using our \"Plugin Helpers\",\n/// or write your own syntax and pass the normalized results along\n/// to `su` for compilation.\n///\n/// @group su-math\n///\n/// @see su-span\n/// @see su-gutter\n/// @see su-slice\n/// @ignore _su-sum\n/// @ignore _su-calc-span\n/// @ignore _su-calc-sum\n/// @ignore _su-needs-calc-output\n\n\n\n// Su Span\n// -------\n/// Calculates and returns a CSS-ready span width,\n/// based on normalized span and context data –\n/// a low-level version of `susy-span`,\n/// with all of the logic and none of the syntax sugar.\n///\n/// - Grids defined with unitless numbers will return `%` values.\n/// - Grids defined with comparable units\n///   will return a value in the units provided.\n/// - Grids defined with a mix of units,\n///   or a combination of untiless numbers and unit-lengths,\n///   will return a `calc()` string.\n///\n/// @group su-math\n/// @see susy-span\n///\n/// @param {number | list} $span -\n///   Number or list of grid columns to span\n/// @param {list} $columns -\n///   List of columns available\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {0 | 1 | -1} $container-spread [$spread] -\n///   Number of gutters spanned,\n///   relative to `columns` count\n/// @param {integer} $location [1] -\n///   Optional position of sub-span among full set of columns\n///\n/// @return {length} -\n///   Relative or static length of a span on the grid\n@function su-span(\n  $span,\n  $columns,\n  $gutters,\n  $spread,\n  $container-spread: $spread,\n  $location: 1\n) {\n  $span: su-valid-span($span);\n  $columns: su-valid-columns($columns);\n  $gutters: su-valid-gutters($gutters);\n  $spread: su-valid-spread($spread);\n\n  @if (type-of($span) == 'number') {\n    @if (not unitless($span)) {\n      @return $span;\n    }\n\n    $location: su-valid-location($span, $location, $columns);\n    $span: su-slice($span, $columns, $location, $validate: false);\n  }\n\n  @if _su-needs-calc-output($span, $columns, $gutters, $spread, not 'validate') {\n    @return _su-calc-span($span, $columns, $gutters, $spread, $container-spread, not 'validate');\n  }\n\n  $span-width: _su-sum($span, $gutters, $spread, $validate: false);\n\n  @if unitless($span-width) {\n    $container-spread: su-valid-spread($container-spread);\n    $container: _su-sum($columns, $gutters, $container-spread, $validate: false);\n    @return percentage($span-width / $container);\n  }\n\n  @return $span-width;\n}\n\n\n\n// Su Gutter\n// ---------\n/// Calculates and returns a CSS-ready gutter width,\n/// based on normalized grid data –\n/// a low-level version of `susy-gutter`,\n/// with all of the logic and none of the syntax sugar.\n///\n/// - Grids defined with unitless numbers will return `%` values.\n/// - Grids defined with comparable units\n///   will return a value in the units provided.\n/// - Grids defined with a mix of units,\n///   or a combination of untiless numbers and unit-lengths,\n///   will return a `calc()` string.\n///\n/// @group su-math\n/// @see susy-gutter\n///\n/// @param {list} $columns -\n///   List of columns in the grid\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $container-spread -\n///   Number of gutters spanned,\n///   relative to `columns` count\n///\n/// @return {length} -\n///   Relative or static length of one gutter in a grid\n@function su-gutter(\n  $columns,\n  $gutters,\n  $container-spread\n) {\n  @if (type-of($gutters) == 'number') {\n    @if ($gutters == 0) or (not unitless($gutters)) {\n      @return $gutters;\n    }\n  }\n\n  @if _su-needs-calc-output($gutters, $columns, $gutters, -1, not 'validate') {\n    @return _su-calc-span($gutters, $columns, $gutters, -1, $container-spread, not 'validate');\n  }\n\n  $container: _su-sum($columns, $gutters, $container-spread);\n  @return percentage($gutters / $container);\n}\n\n\n\n// Su Slice\n// --------\n/// Returns a list of columns\n/// based on a given span/location slice of the grid –\n/// a low-level version of `susy-slice`,\n/// with all of the logic and none of the syntax sugar.\n///\n/// @group su-math\n/// @see susy-slice\n///\n/// @param {number} $span -\n///   Number of grid columns to span\n/// @param {list} $columns -\n///   List of columns in the grid\n/// @param {number} $location [1] -\n///   Starting index of a span in the list of columns\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {list} -\n///   Subset list of grid columns, based on span and location\n@function su-slice(\n  $span,\n  $columns,\n  $location: 1,\n  $validate: true\n) {\n  @if $validate {\n    $columns: su-valid-columns($columns);\n    $location: su-valid-location($span, $location, $columns);\n  }\n\n  $floor: floor($span);\n  $sub-columns: ();\n\n  @for $i from $location to ($location + $floor) {\n    $sub-columns: append($sub-columns, nth($columns, $i));\n  }\n\n  @if $floor != $span {\n    $remainder: $span - $floor;\n    $column: $location + $floor;\n    $sub-columns: append($sub-columns, nth($columns, $column) * $remainder);\n  }\n\n  @return $sub-columns;\n}\n\n\n\n// Su Sum\n// ------\n/// Get the total sum of column-units in a layout.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {list} $columns -\n///   List of columns in the grid\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `columns` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {number} -\n///   Total sum of column-units in a grid\n@function _su-sum(\n  $columns,\n  $gutters,\n  $spread,\n  $validate: true\n) {\n  @if $validate {\n    $columns: su-valid-span($columns);\n    $gutters: su-valid-gutters($gutters);\n    $spread: su-valid-spread($spread);\n  }\n\n  // Calculate column-sum\n  $column-sum: 0;\n  @each $column in $columns {\n    $column-sum: $column-sum + $column;\n  }\n\n  $gutter-sum: (ceil(length($columns)) + $spread) * $gutters;\n  $total: if(($gutter-sum > 0), $column-sum + $gutter-sum, $column-sum);\n\n  @return $total;\n}\n\n\n\n// Su Calc\n// -------\n/// Return a usable span width as a `calc()` function,\n/// in order to create mixed-unit grids.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {number | list} $span -\n///   Pre-sliced list of grid columns to span\n/// @param {list} $columns -\n///   List of columns available\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {0 | 1 | -1} $container-spread [$spread] -\n///   Number of gutters spanned,\n///   relative to `columns` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {length} -\n///   Relative or static length of a span on the grid\n@function _su-calc-span(\n  $span,\n  $columns,\n  $gutters,\n  $spread,\n  $container-spread: $spread,\n  $validate: true\n) {\n  @if $validate {\n    $span: su-valid-span($span);\n    $columns: su-valid-columns($columns);\n    $gutters: su-valid-gutters($gutters);\n    $spread: su-valid-spread($spread);\n    $container-spread: su-valid-spread($container-spread);\n  }\n\n  // Span and context\n  $span: _su-calc-sum($span, $gutters, $spread, not 'validate');\n  $context: _su-calc-sum($columns, $gutters, $container-spread, not 'validate');\n\n  // Fixed and fluid\n  $fixed-span: map-get($span, 'fixed');\n  $fluid-span: map-get($span, 'fluid');\n  $fixed-context: map-get($context, 'fixed');\n  $fluid-context: map-get($context, 'fluid');\n\n  $calc: '#{$fixed-span}';\n  $fluid-calc: '(100% - #{$fixed-context})';\n\n  // Fluid-values\n  @if (not $fluid-span) {\n    $fluid-calc: null;\n  } @else if ($fluid-span != $fluid-context) {\n    $fluid-span: '* #{$fluid-span}';\n    $fluid-context: if($fluid-context, '/ #{$fluid-context}', '');\n    $fluid-calc: '(#{$fluid-calc $fluid-context $fluid-span})';\n  }\n\n  @if $fluid-calc {\n    $calc: if(($calc != ''), '#{$calc} + ', '');\n    $calc: '#{$calc + $fluid-calc}';\n  }\n\n  @return calc(#{unquote($calc)});\n}\n\n\n\n// Su Calc-Sum\n// -----------\n/// Get the total sum of fixed and fluid column-units\n/// for creating a mixed-unit layout with `calc()` values.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {list} $columns -\n///   List of columns available\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {map} -\n///   Map with `fixed` and `fluid` keys\n///   containing the proper math as strings\n@function _su-calc-sum(\n  $columns,\n  $gutters,\n  $spread,\n  $validate: true\n) {\n  @if $validate {\n    $columns: su-valid-span($columns);\n    $gutters: su-valid-gutters($gutters);\n    $spread: su-valid-spread($spread);\n  }\n\n  $fluid: 0;\n  $fixed: ();\n  $calc: null;\n\n  // Gutters\n  $gutters:  $gutters * (length($columns) + $spread);\n\n  // Columns\n  @each $col in append($columns, $gutters) {\n    @if unitless($col) {\n      $fluid: $fluid + $col;\n    } @else {\n      $fixed: _su-map-add-units($fixed, $col);\n    }\n  }\n\n  // Compile Fixed Units\n  @each $unit, $total in $fixed {\n    @if ($total != (0 * $total)) {\n      $calc: if($calc, '#{$calc} + #{$total}', '#{$total}');\n    }\n  }\n\n  // Calc null or string\n  @if $calc {\n    $calc: if(str-index($calc, '+'), '(#{$calc})', '#{$calc}');\n  }\n\n  // Fluid 0 => null\n  $fluid: if(($fluid == 0), null, $fluid);\n\n\n  // Return map\n  $return: (\n    'fixed': $calc,\n    'fluid': $fluid,\n  );\n\n  @return $return;\n}\n\n\n\n// Needs Calc\n// ----------\n/// Check if `calc()` will be needed in defining a span,\n/// if the necessary units in a grid are not comparable.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {list} $span -\n///   Slice of columns to span\n/// @param {list} $columns -\n///   List of available columns in the grid\n/// @param {number} $gutters -\n///   Width of a gutter\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {bool} -\n///   `True` when units do not match, and `calc()` will be required\n@function _su-needs-calc-output(\n  $span,\n  $columns,\n  $gutters,\n  $spread,\n  $validate: true\n) {\n  @if $validate {\n    $span: su-valid-span($span);\n    $columns: su-valid-columns($columns);\n    $gutters: su-valid-gutters($gutters);\n  }\n\n  $has-gutter: if((length($span) > 1) or ($spread >= 0), true, false);\n  $check: if($has-gutter, append($span, $gutters), $span);\n  $safe-span: _su-is-comparable($check...);\n\n  @if ($safe-span == 'static') {\n    @return false;\n  } @else if (not $safe-span) {\n    @return true;\n  }\n\n  $safe-fluid: _su-is-comparable($gutters, $columns...);\n\n  @return not $safe-fluid;\n}\n","[data-layout='layout__2_fixed'] {\n  // Fallback\n  $layout: (\n    'columns': susy-repeat(2),\n    'gutters': 0,\n  );\n\n  > * {\n    width: span(1, $layout);\n  }\n\n  > *:nth-child(odd) {\n    clear: both; // IE 11.\n    float: left;\n    margin-right: gutter($layout);\n  }\n\n  > *:nth-child(even) {\n    float: right;\n    margin-right: 0;\n  }\n\n  // Note: This code is usually in `_layouts.base.scss` which is shared across\n  // all layouts. However, this layout overrides the default responsive behavior\n  // in favor of a fixed layout regardless of screen size.\n\n  // Flexbox enhancement\n  @supports (display: flex) {\n    align-items: stretch;\n    display: flex;\n    flex-flow: row wrap;\n  }\n  // Grid\n  @supports (display: grid) {\n    display: grid;\n    grid-auto-rows: minmax($grid-row-min-height, auto);\n    grid-gap: $grid-row-gap;\n    grid-template-columns: repeat(2, 1fr);\n\n    > * {\n      grid-column: auto / span 1;\n      margin-right: 0; // Prevents iframes from expanding the width of the columns.\n      overflow: hidden;\n      width: auto;\n    }\n  }\n}\n","@include mq(sm) {\n  [data-layout='layout__2_25_75'] {\n    $layout: (\n      'columns': susy-repeat(4),\n      'gutters': 0,\n    );\n\n    > *:nth-child(odd) {\n      clear: both; // IE 11.\n      float: left;\n      margin-right: gutter($layout);\n      width: span(1, $layout);\n    }\n\n    > *:nth-child(even) {\n      float: right;\n      margin-right: 0;\n      width: span(3, $layout);\n    }\n\n    @supports (display: grid) {\n      grid-template-columns: repeat(4, 1fr);\n\n      > *:nth-child(odd) {\n        grid-column: auto / span 1;\n      }\n\n      > *:nth-child(even) {\n        grid-column: auto / span 3;\n      }\n\n      // Reset problematic fallback code.\n      > *:nth-child(odd),\n      > *:nth-child(even) {\n        margin-right: 0;\n        width: auto;\n      }\n    }\n  }\n}\n","@include mq(sm) {\n  [data-layout='layout__2_75_25'] {\n    $layout: (\n      'columns': susy-repeat(4),\n      'gutters': 0,\n    );\n\n    > *:nth-child(odd) {\n      clear: both; // IE 11.\n      float: left;\n      margin-right: gutter($layout);\n      width: span(3, $layout);\n    }\n\n    > *:nth-child(even) {\n      float: right;\n      margin-right: 0;\n      width: span(1, $layout);\n    }\n\n    @supports (display: grid) {\n      grid-template-columns: repeat(4, 1fr);\n\n      > *:nth-child(odd) {\n        grid-column: auto / span 3;\n      }\n\n      > *:nth-child(even) {\n        grid-column: auto / span 1;\n      }\n\n      // Reset problematic fallback code.\n      > *:nth-child(odd),\n      > *:nth-child(even) {\n        margin-right: 0;\n        width: auto;\n      }\n    }\n  }\n}\n","@include mq(sm) {\n  [data-layout='layout__2_60_40'] {\n    $layout: (\n      'columns': susy-repeat(5),\n      'gutters': 0,\n    );\n\n    > *:nth-child(odd) {\n      clear: both; // IE 11.\n      float: left;\n      margin-right: gutter($layout);\n      width: span(3, $layout);\n    }\n\n    > *:nth-child(even) {\n      float: right;\n      margin-right: 0;\n      width: span(2, $layout);\n    }\n\n    @supports (display: grid) {\n      grid-template-columns: repeat(5, 1fr);\n\n      > *:nth-child(odd) {\n        grid-column: auto / span 3;\n      }\n\n      > *:nth-child(even) {\n        grid-column: auto / span 2;\n      }\n\n      // Reset problematic fallback code.\n      > *:nth-child(odd),\n      > *:nth-child(even) {\n        margin-right: 0;\n        width: auto;\n      }\n    }\n  }\n}\n","@include mq(sm) {\n  [data-layout='layout__2_40_60'] {\n    $layout: (\n      'columns': susy-repeat(5),\n      'gutters': 0,\n    );\n\n    > *:nth-child(odd) {\n      clear: both; // IE 11.\n      float: left;\n      margin-right: gutter($layout);\n      width: span(2, $layout);\n    }\n\n    > *:nth-child(even) {\n      float: right;\n      margin-right: 0;\n      width: span(3, $layout);\n    }\n\n    @supports (display: grid) {\n      grid-template-columns: repeat(5, 1fr);\n\n      > *:nth-child(odd) {\n        grid-column: auto / span 2;\n      }\n\n      > *:nth-child(even) {\n        grid-column: auto / span 3;\n      }\n\n      // Reset problematic fallback code.\n      > *:nth-child(odd),\n      > *:nth-child(even) {\n        margin-right: 0;\n        width: auto;\n      }\n    }\n  }\n}\n","@include mq(sm) {\n  [data-layout='layout__3'] {\n    $layout: (\n      'columns': susy-repeat(3),\n      'gutters': 0,\n    );\n\n    > * {\n      width: span(1, $layout);\n    }\n\n    > *:nth-child(3n + 1),\n    > *:nth-child(3n + 2) {\n      clear: both; // IE 11.\n      float: left;\n      margin-right: gutter($layout);\n    }\n\n    > *:nth-child(3n + 3) {\n      float: right;\n      margin-right: 0;\n    }\n\n    @supports (display: grid) {\n      grid-template-columns: repeat(3, 1fr);\n\n      > * {\n        grid-column: auto / span 1;\n        margin-right: 0;\n        width: auto;\n      }\n    }\n  }\n}\n","[data-layout='layout__3_2'] {\n  $layout: (\n    'columns': susy-repeat(2),\n    'gutters': 0,\n  );\n\n  > * {\n    width: span(1, $layout);\n  }\n\n  > *:nth-child(3n + 1) {\n    clear: both; // IE 11.\n    float: left;\n    margin-right: gutter($layout);\n  }\n\n  > *:nth-child(3n + 2) {\n    float: right;\n    margin-right: 0;\n  }\n\n  // Note: This code is usually in `components/layout/css/src/layout.scss`\n  // which is shared across all layouts. However, this layout overrides the\n  // default responsive behavior in favor of a fixed layout regardless of\n  // screen size.\n\n  // Flexbox enhancement\n  @supports (display: flex) {\n    align-items: stretch;\n    display: flex;\n    flex-flow: row wrap;\n  }\n\n  // Grid\n  @supports (display: grid) {\n    display: grid;\n    grid-auto-rows: minmax($grid-row-min-height, auto);\n    grid-gap: $grid-row-gap;\n    grid-template-columns: repeat(2, 1fr);\n\n    > * {\n      grid-column: auto / span 1;\n      margin-right: 0;\n      width: auto;\n    }\n  }\n\n  @include mq(sm) {\n    $layout: (\n      'columns': susy-repeat(3),\n      'gutters': 0,\n    );\n\n    > * {\n      width: span(1, $layout);\n    }\n\n    > *:nth-child(3n + 1),\n    > *:nth-child(3n + 2) {\n      clear: both; // IE 11.\n      float: left;\n      margin-right: gutter($layout);\n    }\n\n    > *:nth-child(3n + 3) {\n      float: right;\n      margin-right: 0;\n    }\n\n    @supports (display: grid) {\n      grid-template-columns: repeat(3, 1fr);\n\n      > * {\n        grid-column: auto / span 1;\n        margin-right: 0;\n        width: auto;\n      }\n    }\n  }\n}\n","// @import 'base';\n\n// Four column\n//\n// The *4 column* layout styles the direct element descendants in 4 columns of\n// even proportion, taking up 25% for each column.  It is a responsive layout\n// that collapses to a single column on smaller screens.\n//\n// ### Related Libraries\n//\n// - `base/layout__4`\n//\n// Weight: 4\n//\n// Markup: four.html\n//\n// Style guide: Layouts.Four\n\n[data-layout='layout__4'] {\n  $layout: (\n    'columns': susy-repeat(4),\n    'gutters': 0,\n  );\n  > * {\n    width: span(1, $layout);\n  }\n  > *:nth-child(4n + 1),\n  > *:nth-child(4n + 2),\n  > *:nth-child(4n + 3) {\n    clear: both; // IE 11.\n    float: left;\n    margin-right: gutter($layout);\n  }\n  > *:nth-child(4n + 4) {\n    float: left;\n    margin-right: 0;\n  }\n}\n\n@supports (display: grid) {\n  [data-layout='layout__4'] {\n    grid-template-columns: repeat(4, 1fr);\n    > * {\n      grid-column: auto / span 1;\n      margin-right: 0;\n      width: 100%;\n    }\n  }\n}\n","[data-layout='layout__auto'] {\n  @include mq(sm) {\n    > * {\n      float: left;\n    }\n\n    @for $columns from 1 through $grid-columns {\n      &[data-items='#{$columns}'] {\n        $layout: (\n          'columns': susy-repeat($columns),\n          'gutters': 0,\n        );\n\n        > * {\n          margin-right: gutter($layout);\n          width: span(1, $layout);\n        }\n      }\n    }\n\n    > *:last-child {\n      margin-right: 0;\n    }\n\n    @supports (display: grid) {\n      @for $columns from 1 through $grid-columns {\n        &[data-items='#{$columns}'] {\n          grid-template-columns: repeat($columns, 1fr);\n        }\n      }\n\n      // Reset problematic fallback code.\n      &[data-items] {\n        > * {\n          margin-right: 0;\n          min-height: auto;\n          width: auto;\n        }\n      }\n    }\n  }\n}\n"]}